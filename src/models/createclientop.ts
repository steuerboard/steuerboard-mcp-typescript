/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { Client, Client$zodSchema } from "./client.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type CreateClientPath = string | number;

export const CreateClientPath$zodSchema: z.ZodType<
  CreateClientPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type CreateClientIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const CreateClientIssue$zodSchema: z.ZodType<
  CreateClientIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type CreateClientError = {
  issues: Array<CreateClientIssue>;
  name: string;
};

export const CreateClientError$zodSchema: z.ZodType<
  CreateClientError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => CreateClientIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type CreateClientUnprocessableEntityResponseBody = {
  success: boolean;
  error: CreateClientError;
};

export const CreateClientUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  CreateClientUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => CreateClientError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

export const CreateClientType$zodSchema = z.enum([
  "auth_error",
]);

export type CreateClientType = z.infer<typeof CreateClientType$zodSchema>;

export const CreateClientCode$zodSchema = z.enum([
  "missing_scope",
]);

export type CreateClientCode = z.infer<typeof CreateClientCode$zodSchema>;

/**
 * Missing scope
 */
export type CreateClientForbiddenResponseBody = {
  status_code: number;
  type: CreateClientType;
  code: CreateClientCode;
  message: string;
};

export const CreateClientForbiddenResponseBody$zodSchema: z.ZodType<
  CreateClientForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: CreateClientCode$zodSchema,
  message: z.string(),
  status_code: z.number(),
  type: CreateClientType$zodSchema,
}).describe("Missing scope");

export type CreateClientResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Client?: Client | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | CreateClientForbiddenResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | CreateClientUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const CreateClientResponse$zodSchema: z.ZodType<
  CreateClientResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Client: Client$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    CreateClientForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    CreateClientUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
