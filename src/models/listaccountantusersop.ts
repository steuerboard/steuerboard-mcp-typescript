/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AccountantUser, AccountantUser$zodSchema } from "./accountantuser.js";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { Pagination, Pagination$zodSchema } from "./pagination.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

/**
 * The sort field of the results
 */
export const ListAccountantUsersSort$zodSchema = z.enum([
  "createdAt",
  "updatedAt",
  "email",
  "firstName",
  "lastName",
]).describe("The sort field of the results");

export type ListAccountantUsersSort = z.infer<
  typeof ListAccountantUsersSort$zodSchema
>;

/**
 * The order of the results based on the sort field
 */
export const ListAccountantUsersOrder$zodSchema = z.enum([
  "asc",
  "desc",
]).describe("The order of the results based on the sort field");

export type ListAccountantUsersOrder = z.infer<
  typeof ListAccountantUsersOrder$zodSchema
>;

export type ListAccountantUsersRequest = {
  limit?: number | undefined;
  cursor?: string | undefined;
  sort?: ListAccountantUsersSort | undefined;
  order?: ListAccountantUsersOrder | undefined;
};

export const ListAccountantUsersRequest$zodSchema: z.ZodType<
  ListAccountantUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  limit: z.number().default(20),
  order: ListAccountantUsersOrder$zodSchema.default("desc"),
  sort: ListAccountantUsersSort$zodSchema.default("createdAt"),
});

export type ListAccountantUsersPath = string | number;

export const ListAccountantUsersPath$zodSchema: z.ZodType<
  ListAccountantUsersPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type ListAccountantUsersIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const ListAccountantUsersIssue$zodSchema: z.ZodType<
  ListAccountantUsersIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type ListAccountantUsersError = {
  issues: Array<ListAccountantUsersIssue>;
  name: string;
};

export const ListAccountantUsersError$zodSchema: z.ZodType<
  ListAccountantUsersError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => ListAccountantUsersIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type ListAccountantUsersUnprocessableEntityResponseBody = {
  success: boolean;
  error: ListAccountantUsersError;
};

export const ListAccountantUsersUnprocessableEntityResponseBody$zodSchema:
  z.ZodType<
    ListAccountantUsersUnprocessableEntityResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.lazy(() => ListAccountantUsersError$zodSchema),
    success: z.boolean(),
  }).describe("The validation error(s)");

export const ListAccountantUsersStatusCode$zodSchema = z.literal(403);

export type ListAccountantUsersStatusCode = z.infer<
  typeof ListAccountantUsersStatusCode$zodSchema
>;

export const ListAccountantUsersType$zodSchema = z.enum([
  "auth_error",
]);

export type ListAccountantUsersType = z.infer<
  typeof ListAccountantUsersType$zodSchema
>;

export const ListAccountantUsersCode$zodSchema = z.enum([
  "missing_scope",
]);

export type ListAccountantUsersCode = z.infer<
  typeof ListAccountantUsersCode$zodSchema
>;

/**
 * Missing scope
 */
export type ListAccountantUsersForbiddenResponseBody = {
  status_code: ListAccountantUsersStatusCode;
  type: ListAccountantUsersType;
  code: ListAccountantUsersCode;
  message: string;
};

export const ListAccountantUsersForbiddenResponseBody$zodSchema: z.ZodType<
  ListAccountantUsersForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: ListAccountantUsersCode$zodSchema,
  message: z.string(),
  status_code: ListAccountantUsersStatusCode$zodSchema,
  type: ListAccountantUsersType$zodSchema,
}).describe("Missing scope");

/**
 * Accountant users
 */
export type ListAccountantUsersResponseBody = {
  data: Array<AccountantUser>;
  pagination: Pagination;
};

export const ListAccountantUsersResponseBody$zodSchema: z.ZodType<
  ListAccountantUsersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(AccountantUser$zodSchema),
  pagination: Pagination$zodSchema,
}).describe("Accountant users");

export type ListAccountantUsersResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  twoHundredApplicationJsonObject?: ListAccountantUsersResponseBody | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | ListAccountantUsersForbiddenResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | ListAccountantUsersUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const ListAccountantUsersResponse$zodSchema: z.ZodType<
  ListAccountantUsersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    ListAccountantUsersForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    ListAccountantUsersUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
  twoHundredApplicationJsonObject: z.lazy(() =>
    ListAccountantUsersResponseBody$zodSchema
  ).optional(),
});
