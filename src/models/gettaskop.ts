/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";
import { Task, Task$zodSchema } from "./task.js";

export type GetTaskRequest = { id: string; xClientId: string };

export const GetTaskRequest$zodSchema: z.ZodType<
  GetTaskRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  xClientId: z.string(),
});

export type GetTaskPath = string | number;

export const GetTaskPath$zodSchema: z.ZodType<
  GetTaskPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type GetTaskIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const GetTaskIssue$zodSchema: z.ZodType<
  GetTaskIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type GetTaskError = { issues: Array<GetTaskIssue>; name: string };

export const GetTaskError$zodSchema: z.ZodType<
  GetTaskError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => GetTaskIssue$zodSchema)),
  name: z.string(),
});

/**
 * Invalid id error
 */
export type GetTaskUnprocessableEntityResponseBody = {
  success: boolean;
  error: GetTaskError;
};

export const GetTaskUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  GetTaskUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => GetTaskError$zodSchema),
  success: z.boolean(),
}).describe("Invalid id error");

export const GetTaskStatusCode$zodSchema = z.literal(403);

export type GetTaskStatusCode = z.infer<typeof GetTaskStatusCode$zodSchema>;

export const GetTaskType$zodSchema = z.enum([
  "auth_error",
]);

export type GetTaskType = z.infer<typeof GetTaskType$zodSchema>;

export const GetTaskCode$zodSchema = z.enum([
  "missing_scope",
]);

export type GetTaskCode = z.infer<typeof GetTaskCode$zodSchema>;

/**
 * Missing scope
 */
export type GetTaskForbiddenResponseBody = {
  status_code: GetTaskStatusCode;
  type: GetTaskType;
  code: GetTaskCode;
  message: string;
};

export const GetTaskForbiddenResponseBody$zodSchema: z.ZodType<
  GetTaskForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: GetTaskCode$zodSchema,
  message: z.string(),
  status_code: GetTaskStatusCode$zodSchema,
  type: GetTaskType$zodSchema,
}).describe("Missing scope");

export type GetTaskResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Task?: Task | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | GetTaskForbiddenResponseBody
    | undefined;
  not_found?: NotFound | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | GetTaskUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const GetTaskResponse$zodSchema: z.ZodType<
  GetTaskResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Task: Task$zodSchema.optional(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    GetTaskForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    GetTaskUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  not_found: NotFound$zodSchema.optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
