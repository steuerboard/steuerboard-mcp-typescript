/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";
import { Workspace, Workspace$zodSchema } from "./workspace.js";
import {
  WorkspaceUpdate,
  WorkspaceUpdate$zodSchema,
} from "./workspaceupdate.js";

export type UpdateWorkspaceRequest = {
  id: string;
  xClientId: string;
  WorkspaceUpdate: WorkspaceUpdate;
};

export const UpdateWorkspaceRequest$zodSchema: z.ZodType<
  UpdateWorkspaceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  WorkspaceUpdate: WorkspaceUpdate$zodSchema,
  id: z.string(),
  xClientId: z.string(),
});

export type UpdateWorkspacePath2 = string | number;

export const UpdateWorkspacePath2$zodSchema: z.ZodType<
  UpdateWorkspacePath2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type UpdateWorkspaceIssue2 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const UpdateWorkspaceIssue2$zodSchema: z.ZodType<
  UpdateWorkspaceIssue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type UpdateWorkspaceError2 = {
  issues: Array<UpdateWorkspaceIssue2>;
  name: string;
};

export const UpdateWorkspaceError2$zodSchema: z.ZodType<
  UpdateWorkspaceError2,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => UpdateWorkspaceIssue2$zodSchema)),
  name: z.string(),
});

export type UpdateWorkspaceResponseBody2 = {
  success: boolean;
  error: UpdateWorkspaceError2;
};

export const UpdateWorkspaceResponseBody2$zodSchema: z.ZodType<
  UpdateWorkspaceResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => UpdateWorkspaceError2$zodSchema),
  success: z.boolean(),
});

export type UpdateWorkspacePath1 = string | number;

export const UpdateWorkspacePath1$zodSchema: z.ZodType<
  UpdateWorkspacePath1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type UpdateWorkspaceIssue1 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const UpdateWorkspaceIssue1$zodSchema: z.ZodType<
  UpdateWorkspaceIssue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type UpdateWorkspaceError1 = {
  issues: Array<UpdateWorkspaceIssue1>;
  name: string;
};

export const UpdateWorkspaceError1$zodSchema: z.ZodType<
  UpdateWorkspaceError1,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => UpdateWorkspaceIssue1$zodSchema)),
  name: z.string(),
});

export type UpdateWorkspaceResponseBody1 = {
  success: boolean;
  error: UpdateWorkspaceError1;
};

export const UpdateWorkspaceResponseBody1$zodSchema: z.ZodType<
  UpdateWorkspaceResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => UpdateWorkspaceError1$zodSchema),
  success: z.boolean(),
});

/**
 * The validation error(s)
 */
export type UpdateWorkspaceResponseBody =
  | UpdateWorkspaceResponseBody1
  | UpdateWorkspaceResponseBody2;

export const UpdateWorkspaceResponseBody$zodSchema: z.ZodType<
  UpdateWorkspaceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateWorkspaceResponseBody1$zodSchema),
  z.lazy(() => UpdateWorkspaceResponseBody2$zodSchema),
]).describe("The validation error(s)");

export const UpdateWorkspaceStatusCode$zodSchema = z.literal(403);

export type UpdateWorkspaceStatusCode = z.infer<
  typeof UpdateWorkspaceStatusCode$zodSchema
>;

export const UpdateWorkspaceType$zodSchema = z.enum([
  "auth_error",
]);

export type UpdateWorkspaceType = z.infer<typeof UpdateWorkspaceType$zodSchema>;

export const UpdateWorkspaceCode$zodSchema = z.enum([
  "missing_scope",
]);

export type UpdateWorkspaceCode = z.infer<typeof UpdateWorkspaceCode$zodSchema>;

/**
 * Missing scope
 */
export type UpdateWorkspaceForbiddenResponseBody = {
  status_code: UpdateWorkspaceStatusCode;
  type: UpdateWorkspaceType;
  code: UpdateWorkspaceCode;
  message: string;
};

export const UpdateWorkspaceForbiddenResponseBody$zodSchema: z.ZodType<
  UpdateWorkspaceForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: UpdateWorkspaceCode$zodSchema,
  message: z.string(),
  status_code: UpdateWorkspaceStatusCode$zodSchema,
  type: UpdateWorkspaceType$zodSchema,
}).describe("Missing scope");

export type UpdateWorkspaceResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Workspace?: Workspace | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  object?: UpdateWorkspaceForbiddenResponseBody | undefined;
  not_found?: NotFound | undefined;
  oneOf?:
    | UpdateWorkspaceResponseBody1
    | UpdateWorkspaceResponseBody2
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const UpdateWorkspaceResponse$zodSchema: z.ZodType<
  UpdateWorkspaceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Workspace: Workspace$zodSchema.optional(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  not_found: NotFound$zodSchema.optional(),
  object: z.lazy(() => UpdateWorkspaceForbiddenResponseBody$zodSchema)
    .optional(),
  oneOf: z.union([
    z.lazy(() => UpdateWorkspaceResponseBody1$zodSchema),
    z.lazy(() => UpdateWorkspaceResponseBody2$zodSchema),
  ]).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
