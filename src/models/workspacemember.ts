/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Optional user object with denormalised information for convenience.
 */
export type User = {
  id: string;
  email: string;
  firstName: string | null;
  lastName: string | null;
};

export const User$zodSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z.object({
  email: z.string(),
  firstName: z.string().nullable(),
  id: z.string(),
  lastName: z.string().nullable(),
}).describe(
  "Optional user object with denormalised information for convenience.",
);

export type WorkspaceMember = {
  createdAt: string;
  updatedAt: string;
  workspaceId: string;
  isMuted: boolean;
  userId: string;
  user?: User | undefined;
};

export const WorkspaceMember$zodSchema: z.ZodType<
  WorkspaceMember,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string().datetime({ offset: true }),
  isMuted: z.boolean(),
  updatedAt: z.string().datetime({ offset: true }),
  user: z.lazy(() => User$zodSchema).optional(),
  userId: z.string(),
  workspaceId: z.string(),
});
