/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Client, Client$zodSchema } from "./client.js";

export type GetClientRequest = { id: string };

export const GetClientRequest$zodSchema: z.ZodType<
  GetClientRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/**
 * Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers
 */
export type GetClientTooManyRequestsResponseBody = { message: string };

export const GetClientTooManyRequestsResponseBody$zodSchema: z.ZodType<
  GetClientTooManyRequestsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe(
  "Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers",
);

export type GetClientPath = string | number;

export const GetClientPath$zodSchema: z.ZodType<
  GetClientPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type GetClientIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const GetClientIssue$zodSchema: z.ZodType<
  GetClientIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type GetClientError = { issues: Array<GetClientIssue>; name: string };

export const GetClientError$zodSchema: z.ZodType<
  GetClientError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => GetClientIssue$zodSchema)),
  name: z.string(),
});

/**
 * Invalid id error
 */
export type GetClientUnprocessableEntityResponseBody = {
  success: boolean;
  error: GetClientError;
};

export const GetClientUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  GetClientUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => GetClientError$zodSchema),
  success: z.boolean(),
}).describe("Invalid id error");

/**
 * Client not found
 */
export type GetClientNotFoundResponseBody = { message: string };

export const GetClientNotFoundResponseBody$zodSchema: z.ZodType<
  GetClientNotFoundResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe("Client not found");

export type GetClientResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Client?: Client | undefined;
  fourHundredAndFourApplicationJsonObject?:
    | GetClientNotFoundResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | GetClientUnprocessableEntityResponseBody
    | undefined;
  fourHundredAndTwentyNineApplicationJsonObject?:
    | GetClientTooManyRequestsResponseBody
    | undefined;
};

export const GetClientResponse$zodSchema: z.ZodType<
  GetClientResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Client: Client$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndFourApplicationJsonObject: z.lazy(() =>
    GetClientNotFoundResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyNineApplicationJsonObject: z.lazy(() =>
    GetClientTooManyRequestsResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    GetClientUnprocessableEntityResponseBody$zodSchema
  ).optional(),
});
