/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { DeleteResponse, DeleteResponse$zodSchema } from "./deleteresponse.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type DeleteAccountantUserRequest = { id: string };

export const DeleteAccountantUserRequest$zodSchema: z.ZodType<
  DeleteAccountantUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

export const DeleteAccountantUserStatusCode$zodSchema = z.literal(403);

export type DeleteAccountantUserStatusCode = z.infer<
  typeof DeleteAccountantUserStatusCode$zodSchema
>;

export const DeleteAccountantUserType$zodSchema = z.enum([
  "auth_error",
]);

export type DeleteAccountantUserType = z.infer<
  typeof DeleteAccountantUserType$zodSchema
>;

export const DeleteAccountantUserCode$zodSchema = z.enum([
  "missing_scope",
]);

export type DeleteAccountantUserCode = z.infer<
  typeof DeleteAccountantUserCode$zodSchema
>;

/**
 * Missing scope
 */
export type DeleteAccountantUserResponseBody = {
  status_code: DeleteAccountantUserStatusCode;
  type: DeleteAccountantUserType;
  code: DeleteAccountantUserCode;
  message: string;
};

export const DeleteAccountantUserResponseBody$zodSchema: z.ZodType<
  DeleteAccountantUserResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: DeleteAccountantUserCode$zodSchema,
  message: z.string(),
  status_code: DeleteAccountantUserStatusCode$zodSchema,
  type: DeleteAccountantUserType$zodSchema,
}).describe("Missing scope");

export type DeleteAccountantUserResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  DeleteResponse?: DeleteResponse | undefined;
  auth_error?: AuthError | undefined;
  object?: DeleteAccountantUserResponseBody | undefined;
  not_found?: NotFound | undefined;
  conflict?: Conflict | undefined;
  rate_limit?: RateLimit | undefined;
};

export const DeleteAccountantUserResponse$zodSchema: z.ZodType<
  DeleteAccountantUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  DeleteResponse: DeleteResponse$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  conflict: Conflict$zodSchema.optional(),
  not_found: NotFound$zodSchema.optional(),
  object: z.lazy(() => DeleteAccountantUserResponseBody$zodSchema).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
