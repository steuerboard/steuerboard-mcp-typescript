/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { FileT, FileT$zodSchema } from "./file.js";

export type GetFileRequest = { id: string; xClientId: string };

export const GetFileRequest$zodSchema: z.ZodType<
  GetFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  xClientId: z.string(),
});

/**
 * Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers
 */
export type GetFileTooManyRequestsResponseBody = { message: string };

export const GetFileTooManyRequestsResponseBody$zodSchema: z.ZodType<
  GetFileTooManyRequestsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe(
  "Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers",
);

export type GetFilePath = string | number;

export const GetFilePath$zodSchema: z.ZodType<
  GetFilePath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type GetFileIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const GetFileIssue$zodSchema: z.ZodType<
  GetFileIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type GetFileError = { issues: Array<GetFileIssue>; name: string };

export const GetFileError$zodSchema: z.ZodType<
  GetFileError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => GetFileIssue$zodSchema)),
  name: z.string(),
});

/**
 * Invalid id error
 */
export type GetFileUnprocessableEntityResponseBody = {
  success: boolean;
  error: GetFileError;
};

export const GetFileUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  GetFileUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => GetFileError$zodSchema),
  success: z.boolean(),
}).describe("Invalid id error");

/**
 * File not found
 */
export type GetFileNotFoundResponseBody = { message: string };

export const GetFileNotFoundResponseBody$zodSchema: z.ZodType<
  GetFileNotFoundResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe("File not found");

export type GetFileResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  FileT?: FileT | undefined;
  fourHundredAndFourApplicationJsonObject?:
    | GetFileNotFoundResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | GetFileUnprocessableEntityResponseBody
    | undefined;
  fourHundredAndTwentyNineApplicationJsonObject?:
    | GetFileTooManyRequestsResponseBody
    | undefined;
};

export const GetFileResponse$zodSchema: z.ZodType<
  GetFileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  FileT: FileT$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndFourApplicationJsonObject: z.lazy(() =>
    GetFileNotFoundResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyNineApplicationJsonObject: z.lazy(() =>
    GetFileTooManyRequestsResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    GetFileUnprocessableEntityResponseBody$zodSchema
  ).optional(),
});
