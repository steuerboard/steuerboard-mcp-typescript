/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { DeleteResponse, DeleteResponse$zodSchema } from "./deleteresponse.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";
import {
  WorkspaceMemberRemove,
  WorkspaceMemberRemove$zodSchema,
} from "./workspacememberremove.js";

export type RemoveWorkspaceMemberRequest = {
  id: string;
  xClientId: string;
  WorkspaceMemberRemove: WorkspaceMemberRemove;
};

export const RemoveWorkspaceMemberRequest$zodSchema: z.ZodType<
  RemoveWorkspaceMemberRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  WorkspaceMemberRemove: WorkspaceMemberRemove$zodSchema,
  id: z.string(),
  xClientId: z.string(),
});

export type RemoveWorkspaceMemberPath = string | number;

export const RemoveWorkspaceMemberPath$zodSchema: z.ZodType<
  RemoveWorkspaceMemberPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type RemoveWorkspaceMemberIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const RemoveWorkspaceMemberIssue$zodSchema: z.ZodType<
  RemoveWorkspaceMemberIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type RemoveWorkspaceMemberError = {
  issues: Array<RemoveWorkspaceMemberIssue>;
  name: string;
};

export const RemoveWorkspaceMemberError$zodSchema: z.ZodType<
  RemoveWorkspaceMemberError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => RemoveWorkspaceMemberIssue$zodSchema)),
  name: z.string(),
});

/**
 * Invalid id error
 */
export type RemoveWorkspaceMemberUnprocessableEntityResponseBody = {
  success: boolean;
  error: RemoveWorkspaceMemberError;
};

export const RemoveWorkspaceMemberUnprocessableEntityResponseBody$zodSchema:
  z.ZodType<
    RemoveWorkspaceMemberUnprocessableEntityResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.lazy(() => RemoveWorkspaceMemberError$zodSchema),
    success: z.boolean(),
  }).describe("Invalid id error");

export const RemoveWorkspaceMemberStatusCode$zodSchema = z.literal(403);

export type RemoveWorkspaceMemberStatusCode = z.infer<
  typeof RemoveWorkspaceMemberStatusCode$zodSchema
>;

export const RemoveWorkspaceMemberType$zodSchema = z.enum([
  "auth_error",
]);

export type RemoveWorkspaceMemberType = z.infer<
  typeof RemoveWorkspaceMemberType$zodSchema
>;

export const RemoveWorkspaceMemberCode$zodSchema = z.enum([
  "missing_scope",
]);

export type RemoveWorkspaceMemberCode = z.infer<
  typeof RemoveWorkspaceMemberCode$zodSchema
>;

/**
 * Missing scope
 */
export type RemoveWorkspaceMemberForbiddenResponseBody = {
  status_code: RemoveWorkspaceMemberStatusCode;
  type: RemoveWorkspaceMemberType;
  code: RemoveWorkspaceMemberCode;
  message: string;
};

export const RemoveWorkspaceMemberForbiddenResponseBody$zodSchema: z.ZodType<
  RemoveWorkspaceMemberForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: RemoveWorkspaceMemberCode$zodSchema,
  message: z.string(),
  status_code: RemoveWorkspaceMemberStatusCode$zodSchema,
  type: RemoveWorkspaceMemberType$zodSchema,
}).describe("Missing scope");

export type RemoveWorkspaceMemberResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  DeleteResponse?: DeleteResponse | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | RemoveWorkspaceMemberForbiddenResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | RemoveWorkspaceMemberUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const RemoveWorkspaceMemberResponse$zodSchema: z.ZodType<
  RemoveWorkspaceMemberResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  DeleteResponse: DeleteResponse$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    RemoveWorkspaceMemberForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    RemoveWorkspaceMemberUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
