/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AccountantUser, AccountantUser$zodSchema } from "./accountantuser.js";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";
import {
  UpdateAccountantUser,
  UpdateAccountantUser$zodSchema,
} from "./updateaccountantuser.js";

export type UpdateAccountantUserRequest = {
  id: string;
  UpdateAccountantUser: UpdateAccountantUser;
};

export const UpdateAccountantUserRequest$zodSchema: z.ZodType<
  UpdateAccountantUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  UpdateAccountantUser: UpdateAccountantUser$zodSchema,
  id: z.string(),
});

export type UpdateAccountantUserPath2 = string | number;

export const UpdateAccountantUserPath2$zodSchema: z.ZodType<
  UpdateAccountantUserPath2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type UpdateAccountantUserIssue2 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const UpdateAccountantUserIssue2$zodSchema: z.ZodType<
  UpdateAccountantUserIssue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type UpdateAccountantUserError2 = {
  issues: Array<UpdateAccountantUserIssue2>;
  name: string;
};

export const UpdateAccountantUserError2$zodSchema: z.ZodType<
  UpdateAccountantUserError2,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => UpdateAccountantUserIssue2$zodSchema)),
  name: z.string(),
});

export type UpdateAccountantUserResponseBody2 = {
  success: boolean;
  error: UpdateAccountantUserError2;
};

export const UpdateAccountantUserResponseBody2$zodSchema: z.ZodType<
  UpdateAccountantUserResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => UpdateAccountantUserError2$zodSchema),
  success: z.boolean(),
});

export type UpdateAccountantUserPath1 = string | number;

export const UpdateAccountantUserPath1$zodSchema: z.ZodType<
  UpdateAccountantUserPath1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type UpdateAccountantUserIssue1 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const UpdateAccountantUserIssue1$zodSchema: z.ZodType<
  UpdateAccountantUserIssue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type UpdateAccountantUserError1 = {
  issues: Array<UpdateAccountantUserIssue1>;
  name: string;
};

export const UpdateAccountantUserError1$zodSchema: z.ZodType<
  UpdateAccountantUserError1,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => UpdateAccountantUserIssue1$zodSchema)),
  name: z.string(),
});

export type UpdateAccountantUserResponseBody1 = {
  success: boolean;
  error: UpdateAccountantUserError1;
};

export const UpdateAccountantUserResponseBody1$zodSchema: z.ZodType<
  UpdateAccountantUserResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => UpdateAccountantUserError1$zodSchema),
  success: z.boolean(),
});

/**
 * The validation error(s)
 */
export type UpdateAccountantUserResponseBody =
  | UpdateAccountantUserResponseBody1
  | UpdateAccountantUserResponseBody2;

export const UpdateAccountantUserResponseBody$zodSchema: z.ZodType<
  UpdateAccountantUserResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateAccountantUserResponseBody1$zodSchema),
  z.lazy(() => UpdateAccountantUserResponseBody2$zodSchema),
]).describe("The validation error(s)");

export const UpdateAccountantUserStatusCode$zodSchema = z.literal(403);

export type UpdateAccountantUserStatusCode = z.infer<
  typeof UpdateAccountantUserStatusCode$zodSchema
>;

export const UpdateAccountantUserType$zodSchema = z.enum([
  "auth_error",
]);

export type UpdateAccountantUserType = z.infer<
  typeof UpdateAccountantUserType$zodSchema
>;

export const UpdateAccountantUserCode$zodSchema = z.enum([
  "missing_scope",
]);

export type UpdateAccountantUserCode = z.infer<
  typeof UpdateAccountantUserCode$zodSchema
>;

/**
 * Missing scope
 */
export type UpdateAccountantUserForbiddenResponseBody = {
  status_code: UpdateAccountantUserStatusCode;
  type: UpdateAccountantUserType;
  code: UpdateAccountantUserCode;
  message: string;
};

export const UpdateAccountantUserForbiddenResponseBody$zodSchema: z.ZodType<
  UpdateAccountantUserForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: UpdateAccountantUserCode$zodSchema,
  message: z.string(),
  status_code: UpdateAccountantUserStatusCode$zodSchema,
  type: UpdateAccountantUserType$zodSchema,
}).describe("Missing scope");

export type UpdateAccountantUserResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  AccountantUser?: AccountantUser | undefined;
  auth_error?: AuthError | undefined;
  object?: UpdateAccountantUserForbiddenResponseBody | undefined;
  not_found?: NotFound | undefined;
  oneOf?:
    | UpdateAccountantUserResponseBody1
    | UpdateAccountantUserResponseBody2
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const UpdateAccountantUserResponse$zodSchema: z.ZodType<
  UpdateAccountantUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  AccountantUser: AccountantUser$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  not_found: NotFound$zodSchema.optional(),
  object: z.lazy(() => UpdateAccountantUserForbiddenResponseBody$zodSchema)
    .optional(),
  oneOf: z.union([
    z.lazy(() => UpdateAccountantUserResponseBody1$zodSchema),
    z.lazy(() => UpdateAccountantUserResponseBody2$zodSchema),
  ]).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
