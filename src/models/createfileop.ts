/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { FileT, FileT$zodSchema } from "./file.js";
import { FileCreate, FileCreate$zodSchema } from "./filecreate.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type CreateFileRequest = { xClientId: string; FileCreate: FileCreate };

export const CreateFileRequest$zodSchema: z.ZodType<
  CreateFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  FileCreate: FileCreate$zodSchema,
  xClientId: z.string(),
});

export type CreateFilePath = string | number;

export const CreateFilePath$zodSchema: z.ZodType<
  CreateFilePath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type CreateFileIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const CreateFileIssue$zodSchema: z.ZodType<
  CreateFileIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type CreateFileError = { issues: Array<CreateFileIssue>; name: string };

export const CreateFileError$zodSchema: z.ZodType<
  CreateFileError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => CreateFileIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type CreateFileUnprocessableEntityResponseBody = {
  success: boolean;
  error: CreateFileError;
};

export const CreateFileUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  CreateFileUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => CreateFileError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

export const RequestEntityTooLargeStatusCode$zodSchema = z.literal(413);

export type RequestEntityTooLargeStatusCode = z.infer<
  typeof RequestEntityTooLargeStatusCode$zodSchema
>;

export const RequestEntityTooLargeType$zodSchema = z.enum([
  "bad_request",
]);

export type RequestEntityTooLargeType = z.infer<
  typeof RequestEntityTooLargeType$zodSchema
>;

export const RequestEntityTooLargeCode$zodSchema = z.enum([
  "payload_too_large",
]);

export type RequestEntityTooLargeCode = z.infer<
  typeof RequestEntityTooLargeCode$zodSchema
>;

/**
 * Payload too large
 */
export type CreateFileRequestEntityTooLargeResponseBody = {
  status_code: RequestEntityTooLargeStatusCode;
  type: RequestEntityTooLargeType;
  code: RequestEntityTooLargeCode;
  message: string;
};

export const CreateFileRequestEntityTooLargeResponseBody$zodSchema: z.ZodType<
  CreateFileRequestEntityTooLargeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: RequestEntityTooLargeCode$zodSchema,
  message: z.string(),
  status_code: RequestEntityTooLargeStatusCode$zodSchema,
  type: RequestEntityTooLargeType$zodSchema,
}).describe("Payload too large");

export const CreateFileForbiddenStatusCode$zodSchema = z.literal(403);

export type CreateFileForbiddenStatusCode = z.infer<
  typeof CreateFileForbiddenStatusCode$zodSchema
>;

export const CreateFileForbiddenType$zodSchema = z.enum([
  "auth_error",
]);

export type CreateFileForbiddenType = z.infer<
  typeof CreateFileForbiddenType$zodSchema
>;

export const CreateFileForbiddenCode$zodSchema = z.enum([
  "missing_scope",
]);

export type CreateFileForbiddenCode = z.infer<
  typeof CreateFileForbiddenCode$zodSchema
>;

/**
 * Missing scope
 */
export type CreateFileForbiddenResponseBody = {
  status_code: CreateFileForbiddenStatusCode;
  type: CreateFileForbiddenType;
  code: CreateFileForbiddenCode;
  message: string;
};

export const CreateFileForbiddenResponseBody$zodSchema: z.ZodType<
  CreateFileForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: CreateFileForbiddenCode$zodSchema,
  message: z.string(),
  status_code: CreateFileForbiddenStatusCode$zodSchema,
  type: CreateFileForbiddenType$zodSchema,
}).describe("Missing scope");

export type CreateFileResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  FileT?: FileT | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | CreateFileForbiddenResponseBody
    | undefined;
  fourHundredAndThirteenApplicationJsonObject?:
    | CreateFileRequestEntityTooLargeResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | CreateFileUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const CreateFileResponse$zodSchema: z.ZodType<
  CreateFileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  FileT: FileT$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  fourHundredAndThirteenApplicationJsonObject: z.lazy(() =>
    CreateFileRequestEntityTooLargeResponseBody$zodSchema
  ).optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    CreateFileForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    CreateFileUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
