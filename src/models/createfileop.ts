/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { FileT, FileT$zodSchema } from "./file.js";
import { FileCreate, FileCreate$zodSchema } from "./filecreate.js";

export type CreateFileRequest = {
  xClientId: string;
  FileCreate?: FileCreate | undefined;
};

export const CreateFileRequest$zodSchema: z.ZodType<
  CreateFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  FileCreate: FileCreate$zodSchema.optional(),
  xClientId: z.string(),
});

/**
 * Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers
 */
export type CreateFileTooManyRequestsResponseBody = { message: string };

export const CreateFileTooManyRequestsResponseBody$zodSchema: z.ZodType<
  CreateFileTooManyRequestsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe(
  "Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers",
);

export type CreateFilePath = string | number;

export const CreateFilePath$zodSchema: z.ZodType<
  CreateFilePath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type CreateFileIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const CreateFileIssue$zodSchema: z.ZodType<
  CreateFileIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type CreateFileError = { issues: Array<CreateFileIssue>; name: string };

export const CreateFileError$zodSchema: z.ZodType<
  CreateFileError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => CreateFileIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type CreateFileUnprocessableEntityResponseBody = {
  success: boolean;
  error: CreateFileError;
};

export const CreateFileUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  CreateFileUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => CreateFileError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

/**
 * Payload too large
 */
export type CreateFileRequestEntityTooLargeResponseBody = { message: string };

export const CreateFileRequestEntityTooLargeResponseBody$zodSchema: z.ZodType<
  CreateFileRequestEntityTooLargeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe("Payload too large");

export type CreateFileResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  FileT?: FileT | undefined;
  fourHundredAndThirteenApplicationJsonObject?:
    | CreateFileRequestEntityTooLargeResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | CreateFileUnprocessableEntityResponseBody
    | undefined;
  fourHundredAndTwentyNineApplicationJsonObject?:
    | CreateFileTooManyRequestsResponseBody
    | undefined;
};

export const CreateFileResponse$zodSchema: z.ZodType<
  CreateFileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  FileT: FileT$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndThirteenApplicationJsonObject: z.lazy(() =>
    CreateFileRequestEntityTooLargeResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyNineApplicationJsonObject: z.lazy(() =>
    CreateFileTooManyRequestsResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    CreateFileUnprocessableEntityResponseBody$zodSchema
  ).optional(),
});
