/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The status of the task
 */
export const TaskStatus$zodSchema = z.enum([
  "IN_PROGRESS",
  "ACCEPTED",
  "OPEN",
  "IN_REVIEW",
  "DECLINED",
]).describe("The status of the task");

export type TaskStatus = z.infer<typeof TaskStatus$zodSchema>;

/**
 * The type of the actor
 */
export const ActorType$zodSchema = z.enum([
  "USER",
  "SYSTEM",
  "AI",
  "API",
]).describe("The type of the actor");

export type ActorType = z.infer<typeof ActorType$zodSchema>;

export type Task = {
  id: string;
  title: string;
  text: string | null;
  status: TaskStatus;
  dueDate: string | null;
  workspaceId: string;
  createdById: string | null;
  actorType: ActorType;
  parentId: string | null;
  destinationFolderId: string | null;
  createdAt: string;
  updatedAt: string;
};

export const Task$zodSchema: z.ZodType<Task, z.ZodTypeDef, unknown> = z.object({
  actorType: ActorType$zodSchema,
  createdAt: z.string().datetime({ offset: true }),
  createdById: z.string().nullable(),
  destinationFolderId: z.string().nullable(),
  dueDate: z.string().datetime({ offset: true }).nullable(),
  id: z.string(),
  parentId: z.string().nullable(),
  status: TaskStatus$zodSchema,
  text: z.string().nullable(),
  title: z.string(),
  updatedAt: z.string().datetime({ offset: true }),
  workspaceId: z.string(),
});
