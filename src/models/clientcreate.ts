/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of the client
 */
export const ClientCreateType$zodSchema = z.enum([
  "natural_person",
  "individual_enterprise",
  "legal_person",
]).describe("The type of the client");

export type ClientCreateType = z.infer<typeof ClientCreateType$zodSchema>;

/**
 * The address of the client
 */
export type Address = {
  line1: string;
  line2?: string | undefined;
  city: string;
  postalCode: string;
  countryCode?: string | undefined;
};

export const Address$zodSchema: z.ZodType<Address, z.ZodTypeDef, unknown> = z
  .object({
    city: z.string(),
    countryCode: z.string().default("DE"),
    line1: z.string(),
    line2: z.string().optional(),
    postalCode: z.string(),
  }).describe("The address of the client");

export type ClientCreate = {
  name: string;
  type: ClientCreateType;
  customId?: string | undefined;
  address?: Address | undefined;
};

export const ClientCreate$zodSchema: z.ZodType<
  ClientCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.lazy(() => Address$zodSchema).optional(),
  customId: z.string().optional(),
  name: z.string(),
  type: ClientCreateType$zodSchema,
});
