/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of the client. 'natural_person' for individuals, 'legal_person' for companies like UG, GmbH, AG, Ltd., Inc., etc. and 'individual_enterprise' for sole proprietorships.
 */
export const ClientCreateClientType$zodSchema = z.enum([
  "natural_person",
  "individual_enterprise",
  "legal_person",
]).describe(
  "The type of the client. 'natural_person' for individuals, 'legal_person' for companies like UG, GmbH, AG, Ltd., Inc., etc. and 'individual_enterprise' for sole proprietorships.",
);

export type ClientCreateClientType = z.infer<
  typeof ClientCreateClientType$zodSchema
>;

/**
 * The address of the client
 */
export type ClientCreateAddress = {
  line1: string;
  line2?: string | undefined;
  city: string;
  postalCode: string;
  countryCode?: string | undefined;
};

export const ClientCreateAddress$zodSchema: z.ZodType<
  ClientCreateAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string(),
  countryCode: z.string().default("DE"),
  line1: z.string(),
  line2: z.string().optional(),
  postalCode: z.string(),
}).describe("The address of the client");

export type ClientCreate = {
  name: string;
  type: ClientCreateClientType;
  customId?: string | undefined;
  address?: ClientCreateAddress | undefined;
};

export const ClientCreate$zodSchema: z.ZodType<
  ClientCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.lazy(() => ClientCreateAddress$zodSchema).optional(),
  customId: z.string().optional(),
  name: z.string(),
  type: ClientCreateClientType$zodSchema,
});
