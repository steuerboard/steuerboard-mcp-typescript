/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export const WebhooksWorkspaceChangesAction2$zodSchema = z.enum([
  "CREATED",
  "UPDATED",
  "DELETED",
  "ARCHIVED",
]);

export type WebhooksWorkspaceChangesAction2 = z.infer<
  typeof WebhooksWorkspaceChangesAction2$zodSchema
>;

export const WebhooksWorkspaceChangesResource2$zodSchema = z.enum([
  "WORKSPACE",
]);

export type WebhooksWorkspaceChangesResource2 = z.infer<
  typeof WebhooksWorkspaceChangesResource2$zodSchema
>;

export type WebhooksWorkspaceChangesData2 = {
  id: string;
  name: string;
  createdAt: string;
  updatedAt: string;
  archivedAt: string | null;
  clientId: string;
};

export const WebhooksWorkspaceChangesData2$zodSchema: z.ZodType<
  WebhooksWorkspaceChangesData2,
  z.ZodTypeDef,
  unknown
> = z.object({
  archivedAt: z.string().nullable(),
  clientId: z.string(),
  createdAt: z.string(),
  id: z.string(),
  name: z.string(),
  updatedAt: z.string(),
});

export type WebhooksWorkspaceChangesPreviousData = {
  id: string;
  name: string;
  createdAt: string;
  updatedAt: string;
  archivedAt: string | null;
  clientId: string;
};

export const WebhooksWorkspaceChangesPreviousData$zodSchema: z.ZodType<
  WebhooksWorkspaceChangesPreviousData,
  z.ZodTypeDef,
  unknown
> = z.object({
  archivedAt: z.string().nullable(),
  clientId: z.string(),
  createdAt: z.string(),
  id: z.string(),
  name: z.string(),
  updatedAt: z.string(),
});

export type WebhooksWorkspaceChangesWorkspace2 = {
  eventTimestamp: string;
  action: WebhooksWorkspaceChangesAction2;
  clientId: string;
  workspaceId: string | null;
  resource: WebhooksWorkspaceChangesResource2;
  data: WebhooksWorkspaceChangesData2;
  previousData: WebhooksWorkspaceChangesPreviousData;
};

export const WebhooksWorkspaceChangesWorkspace2$zodSchema: z.ZodType<
  WebhooksWorkspaceChangesWorkspace2,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: WebhooksWorkspaceChangesAction2$zodSchema,
  clientId: z.string(),
  data: z.lazy(() => WebhooksWorkspaceChangesData2$zodSchema),
  eventTimestamp: z.string(),
  previousData: z.lazy(() => WebhooksWorkspaceChangesPreviousData$zodSchema),
  resource: WebhooksWorkspaceChangesResource2$zodSchema,
  workspaceId: z.string().nullable(),
});

export const WebhooksWorkspaceChangesAction1$zodSchema = z.enum([
  "CREATED",
  "UPDATED",
  "DELETED",
  "ARCHIVED",
]);

export type WebhooksWorkspaceChangesAction1 = z.infer<
  typeof WebhooksWorkspaceChangesAction1$zodSchema
>;

export const WebhooksWorkspaceChangesResource1$zodSchema = z.enum([
  "WORKSPACE",
]);

export type WebhooksWorkspaceChangesResource1 = z.infer<
  typeof WebhooksWorkspaceChangesResource1$zodSchema
>;

export type WebhooksWorkspaceChangesData1 = {
  id: string;
  name: string;
  createdAt: string;
  updatedAt: string;
  archivedAt: string | null;
  clientId: string;
};

export const WebhooksWorkspaceChangesData1$zodSchema: z.ZodType<
  WebhooksWorkspaceChangesData1,
  z.ZodTypeDef,
  unknown
> = z.object({
  archivedAt: z.string().nullable(),
  clientId: z.string(),
  createdAt: z.string(),
  id: z.string(),
  name: z.string(),
  updatedAt: z.string(),
});

export type WebhooksWorkspaceChangesWorkspace1 = {
  eventTimestamp: string;
  action: WebhooksWorkspaceChangesAction1;
  clientId: string;
  workspaceId: string | null;
  resource: WebhooksWorkspaceChangesResource1;
  data: WebhooksWorkspaceChangesData1;
};

export const WebhooksWorkspaceChangesWorkspace1$zodSchema: z.ZodType<
  WebhooksWorkspaceChangesWorkspace1,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: WebhooksWorkspaceChangesAction1$zodSchema,
  clientId: z.string(),
  data: z.lazy(() => WebhooksWorkspaceChangesData1$zodSchema),
  eventTimestamp: z.string(),
  resource: WebhooksWorkspaceChangesResource1$zodSchema,
  workspaceId: z.string().nullable(),
});

/**
 * Workspace Webhook (create|update)
 */
export type WebhooksWorkspaceChangesRequest =
  | WebhooksWorkspaceChangesWorkspace1
  | WebhooksWorkspaceChangesWorkspace2;

export const WebhooksWorkspaceChangesRequest$zodSchema: z.ZodType<
  WebhooksWorkspaceChangesRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => WebhooksWorkspaceChangesWorkspace1$zodSchema),
  z.lazy(() => WebhooksWorkspaceChangesWorkspace2$zodSchema),
]).describe("Workspace Webhook (create|update)");

export type WebhooksWorkspaceChangesResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
};

export const WebhooksWorkspaceChangesResponse$zodSchema: z.ZodType<
  WebhooksWorkspaceChangesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
