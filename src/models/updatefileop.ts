/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { FileT, FileT$zodSchema } from "./file.js";
import { FileUpdate, FileUpdate$zodSchema } from "./fileupdate.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type UpdateFileRequest = {
  id: string;
  xClientId: string;
  FileUpdate: FileUpdate;
};

export const UpdateFileRequest$zodSchema: z.ZodType<
  UpdateFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  FileUpdate: FileUpdate$zodSchema,
  id: z.string(),
  xClientId: z.string(),
});

export type UpdateFilePath2 = string | number;

export const UpdateFilePath2$zodSchema: z.ZodType<
  UpdateFilePath2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type UpdateFileIssue2 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const UpdateFileIssue2$zodSchema: z.ZodType<
  UpdateFileIssue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type UpdateFileError2 = {
  issues: Array<UpdateFileIssue2>;
  name: string;
};

export const UpdateFileError2$zodSchema: z.ZodType<
  UpdateFileError2,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => UpdateFileIssue2$zodSchema)),
  name: z.string(),
});

export type UpdateFileResponseBody2 = {
  success: boolean;
  error: UpdateFileError2;
};

export const UpdateFileResponseBody2$zodSchema: z.ZodType<
  UpdateFileResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => UpdateFileError2$zodSchema),
  success: z.boolean(),
});

export type UpdateFilePath1 = string | number;

export const UpdateFilePath1$zodSchema: z.ZodType<
  UpdateFilePath1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type UpdateFileIssue1 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const UpdateFileIssue1$zodSchema: z.ZodType<
  UpdateFileIssue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type UpdateFileError1 = {
  issues: Array<UpdateFileIssue1>;
  name: string;
};

export const UpdateFileError1$zodSchema: z.ZodType<
  UpdateFileError1,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => UpdateFileIssue1$zodSchema)),
  name: z.string(),
});

export type UpdateFileResponseBody1 = {
  success: boolean;
  error: UpdateFileError1;
};

export const UpdateFileResponseBody1$zodSchema: z.ZodType<
  UpdateFileResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => UpdateFileError1$zodSchema),
  success: z.boolean(),
});

/**
 * The validation error(s)
 */
export type UpdateFileResponseBody =
  | UpdateFileResponseBody1
  | UpdateFileResponseBody2;

export const UpdateFileResponseBody$zodSchema: z.ZodType<
  UpdateFileResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateFileResponseBody1$zodSchema),
  z.lazy(() => UpdateFileResponseBody2$zodSchema),
]).describe("The validation error(s)");

/**
 * File not found
 */
export type UpdateFileNotFoundResponseBody = { message: string };

export const UpdateFileNotFoundResponseBody$zodSchema: z.ZodType<
  UpdateFileNotFoundResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe("File not found");

export const UpdateFileStatusCode$zodSchema = z.literal(403);

export type UpdateFileStatusCode = z.infer<
  typeof UpdateFileStatusCode$zodSchema
>;

export const UpdateFileType$zodSchema = z.enum([
  "auth_error",
]);

export type UpdateFileType = z.infer<typeof UpdateFileType$zodSchema>;

export const UpdateFileCode$zodSchema = z.enum([
  "missing_scope",
]);

export type UpdateFileCode = z.infer<typeof UpdateFileCode$zodSchema>;

/**
 * Missing scope
 */
export type UpdateFileForbiddenResponseBody = {
  status_code: UpdateFileStatusCode;
  type: UpdateFileType;
  code: UpdateFileCode;
  message: string;
};

export const UpdateFileForbiddenResponseBody$zodSchema: z.ZodType<
  UpdateFileForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: UpdateFileCode$zodSchema,
  message: z.string(),
  status_code: UpdateFileStatusCode$zodSchema,
  type: UpdateFileType$zodSchema,
}).describe("Missing scope");

export type UpdateFileResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  FileT?: FileT | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | UpdateFileForbiddenResponseBody
    | undefined;
  fourHundredAndFourApplicationJsonObject?:
    | UpdateFileNotFoundResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonOneOf?:
    | UpdateFileResponseBody1
    | UpdateFileResponseBody2
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const UpdateFileResponse$zodSchema: z.ZodType<
  UpdateFileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  FileT: FileT$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  fourHundredAndFourApplicationJsonObject: z.lazy(() =>
    UpdateFileNotFoundResponseBody$zodSchema
  ).optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    UpdateFileForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonOneOf: z.union([
    z.lazy(() => UpdateFileResponseBody1$zodSchema),
    z.lazy(() => UpdateFileResponseBody2$zodSchema),
  ]).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
