/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export const WebhooksFileChangesAction2$zodSchema = z.enum([
  "CREATED",
  "UPDATED",
  "DELETED",
  "ARCHIVED",
]);

export type WebhooksFileChangesAction2 = z.infer<
  typeof WebhooksFileChangesAction2$zodSchema
>;

export const WebhooksFileChangesResource2$zodSchema = z.enum([
  "FILE",
]);

export type WebhooksFileChangesResource2 = z.infer<
  typeof WebhooksFileChangesResource2$zodSchema
>;

export type WebhooksFileChangesData2 = {
  id: string;
  createdAt: string;
  updatedAt: string;
  name: string;
  documentDate: string | null;
  mimetype: string;
  size: number;
  folderId: string | null;
  labelIds: Array<string> | null;
};

export const WebhooksFileChangesData2$zodSchema: z.ZodType<
  WebhooksFileChangesData2,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  documentDate: z.string().nullable(),
  folderId: z.string().nullable(),
  id: z.string(),
  labelIds: z.array(z.string()).nullable(),
  mimetype: z.string(),
  name: z.string(),
  size: z.number(),
  updatedAt: z.string(),
});

export type WebhooksFileChangesPreviousData = {
  id: string;
  createdAt: string;
  updatedAt: string;
  name: string;
  documentDate: string | null;
  mimetype: string;
  size: number;
  folderId: string | null;
  labelIds: Array<string> | null;
};

export const WebhooksFileChangesPreviousData$zodSchema: z.ZodType<
  WebhooksFileChangesPreviousData,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  documentDate: z.string().nullable(),
  folderId: z.string().nullable(),
  id: z.string(),
  labelIds: z.array(z.string()).nullable(),
  mimetype: z.string(),
  name: z.string(),
  size: z.number(),
  updatedAt: z.string(),
});

export type WebhooksFileChangesFile2 = {
  eventTimestamp: string;
  action: WebhooksFileChangesAction2;
  clientId: string;
  workspaceId: string | null;
  resource: WebhooksFileChangesResource2;
  data: WebhooksFileChangesData2;
  previousData: WebhooksFileChangesPreviousData;
};

export const WebhooksFileChangesFile2$zodSchema: z.ZodType<
  WebhooksFileChangesFile2,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: WebhooksFileChangesAction2$zodSchema,
  clientId: z.string(),
  data: z.lazy(() => WebhooksFileChangesData2$zodSchema),
  eventTimestamp: z.string(),
  previousData: z.lazy(() => WebhooksFileChangesPreviousData$zodSchema),
  resource: WebhooksFileChangesResource2$zodSchema,
  workspaceId: z.string().nullable(),
});

export const WebhooksFileChangesAction1$zodSchema = z.enum([
  "CREATED",
  "UPDATED",
  "DELETED",
  "ARCHIVED",
]);

export type WebhooksFileChangesAction1 = z.infer<
  typeof WebhooksFileChangesAction1$zodSchema
>;

export const WebhooksFileChangesResource1$zodSchema = z.enum([
  "FILE",
]);

export type WebhooksFileChangesResource1 = z.infer<
  typeof WebhooksFileChangesResource1$zodSchema
>;

export type WebhooksFileChangesData1 = {
  id: string;
  createdAt: string;
  updatedAt: string;
  name: string;
  documentDate: string | null;
  mimetype: string;
  size: number;
  folderId: string | null;
  labelIds: Array<string> | null;
};

export const WebhooksFileChangesData1$zodSchema: z.ZodType<
  WebhooksFileChangesData1,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string(),
  documentDate: z.string().nullable(),
  folderId: z.string().nullable(),
  id: z.string(),
  labelIds: z.array(z.string()).nullable(),
  mimetype: z.string(),
  name: z.string(),
  size: z.number(),
  updatedAt: z.string(),
});

export type WebhooksFileChangesFile1 = {
  eventTimestamp: string;
  action: WebhooksFileChangesAction1;
  clientId: string;
  workspaceId: string | null;
  resource: WebhooksFileChangesResource1;
  data: WebhooksFileChangesData1;
};

export const WebhooksFileChangesFile1$zodSchema: z.ZodType<
  WebhooksFileChangesFile1,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: WebhooksFileChangesAction1$zodSchema,
  clientId: z.string(),
  data: z.lazy(() => WebhooksFileChangesData1$zodSchema),
  eventTimestamp: z.string(),
  resource: WebhooksFileChangesResource1$zodSchema,
  workspaceId: z.string().nullable(),
});

/**
 * File Webhook (create|update)
 */
export type WebhooksFileChangesRequest =
  | WebhooksFileChangesFile1
  | WebhooksFileChangesFile2;

export const WebhooksFileChangesRequest$zodSchema: z.ZodType<
  WebhooksFileChangesRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => WebhooksFileChangesFile1$zodSchema),
  z.lazy(() => WebhooksFileChangesFile2$zodSchema),
]).describe("File Webhook (create|update)");

export type WebhooksFileChangesResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
};

export const WebhooksFileChangesResponse$zodSchema: z.ZodType<
  WebhooksFileChangesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
