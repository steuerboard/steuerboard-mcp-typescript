/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { ClientUser, ClientUser$zodSchema } from "./clientuser.js";
import {
  ClientUserUpdate,
  ClientUserUpdate$zodSchema,
} from "./clientuserupdate.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type UpdateUserRequest = {
  id: string;
  xClientId: string;
  ClientUserUpdate: ClientUserUpdate;
};

export const UpdateUserRequest$zodSchema: z.ZodType<
  UpdateUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ClientUserUpdate: ClientUserUpdate$zodSchema,
  id: z.string(),
  xClientId: z.string(),
});

export type UpdateUserPath2 = string | number;

export const UpdateUserPath2$zodSchema: z.ZodType<
  UpdateUserPath2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type UpdateUserIssue2 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const UpdateUserIssue2$zodSchema: z.ZodType<
  UpdateUserIssue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type UpdateUserError2 = {
  issues: Array<UpdateUserIssue2>;
  name: string;
};

export const UpdateUserError2$zodSchema: z.ZodType<
  UpdateUserError2,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => UpdateUserIssue2$zodSchema)),
  name: z.string(),
});

export type UpdateUserResponseBody2 = {
  success: boolean;
  error: UpdateUserError2;
};

export const UpdateUserResponseBody2$zodSchema: z.ZodType<
  UpdateUserResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => UpdateUserError2$zodSchema),
  success: z.boolean(),
});

export type UpdateUserPath1 = string | number;

export const UpdateUserPath1$zodSchema: z.ZodType<
  UpdateUserPath1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type UpdateUserIssue1 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const UpdateUserIssue1$zodSchema: z.ZodType<
  UpdateUserIssue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type UpdateUserError1 = {
  issues: Array<UpdateUserIssue1>;
  name: string;
};

export const UpdateUserError1$zodSchema: z.ZodType<
  UpdateUserError1,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => UpdateUserIssue1$zodSchema)),
  name: z.string(),
});

export type UpdateUserResponseBody1 = {
  success: boolean;
  error: UpdateUserError1;
};

export const UpdateUserResponseBody1$zodSchema: z.ZodType<
  UpdateUserResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => UpdateUserError1$zodSchema),
  success: z.boolean(),
});

/**
 * The validation error(s)
 */
export type UpdateUserResponseBody =
  | UpdateUserResponseBody1
  | UpdateUserResponseBody2;

export const UpdateUserResponseBody$zodSchema: z.ZodType<
  UpdateUserResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateUserResponseBody1$zodSchema),
  z.lazy(() => UpdateUserResponseBody2$zodSchema),
]).describe("The validation error(s)");

export const UpdateUserStatusCode$zodSchema = z.literal(403);

export type UpdateUserStatusCode = z.infer<
  typeof UpdateUserStatusCode$zodSchema
>;

export const UpdateUserType$zodSchema = z.enum([
  "auth_error",
]);

export type UpdateUserType = z.infer<typeof UpdateUserType$zodSchema>;

export const UpdateUserCode$zodSchema = z.enum([
  "missing_scope",
]);

export type UpdateUserCode = z.infer<typeof UpdateUserCode$zodSchema>;

/**
 * Missing scope
 */
export type UpdateUserForbiddenResponseBody = {
  status_code: UpdateUserStatusCode;
  type: UpdateUserType;
  code: UpdateUserCode;
  message: string;
};

export const UpdateUserForbiddenResponseBody$zodSchema: z.ZodType<
  UpdateUserForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: UpdateUserCode$zodSchema,
  message: z.string(),
  status_code: UpdateUserStatusCode$zodSchema,
  type: UpdateUserType$zodSchema,
}).describe("Missing scope");

export type UpdateUserResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ClientUser?: ClientUser | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  object?: UpdateUserForbiddenResponseBody | undefined;
  not_found?: NotFound | undefined;
  oneOf?: UpdateUserResponseBody1 | UpdateUserResponseBody2 | undefined;
  rate_limit?: RateLimit | undefined;
};

export const UpdateUserResponse$zodSchema: z.ZodType<
  UpdateUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ClientUser: ClientUser$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  not_found: NotFound$zodSchema.optional(),
  object: z.lazy(() => UpdateUserForbiddenResponseBody$zodSchema).optional(),
  oneOf: z.union([
    z.lazy(() => UpdateUserResponseBody1$zodSchema),
    z.lazy(() => UpdateUserResponseBody2$zodSchema),
  ]).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
