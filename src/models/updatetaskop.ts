/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";
import { Task, Task$zodSchema } from "./task.js";
import { TaskUpdate, TaskUpdate$zodSchema } from "./taskupdate.js";

export type UpdateTaskRequest = {
  id: string;
  xClientId: string;
  TaskUpdate?: TaskUpdate | undefined;
};

export const UpdateTaskRequest$zodSchema: z.ZodType<
  UpdateTaskRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  TaskUpdate: TaskUpdate$zodSchema.optional(),
  id: z.string(),
  xClientId: z.string(),
});

export type UpdateTaskPath2 = string | number;

export const UpdateTaskPath2$zodSchema: z.ZodType<
  UpdateTaskPath2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type UpdateTaskIssue2 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const UpdateTaskIssue2$zodSchema: z.ZodType<
  UpdateTaskIssue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type UpdateTaskError2 = {
  issues: Array<UpdateTaskIssue2>;
  name: string;
};

export const UpdateTaskError2$zodSchema: z.ZodType<
  UpdateTaskError2,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => UpdateTaskIssue2$zodSchema)),
  name: z.string(),
});

export type UpdateTaskResponseBody2 = {
  success: boolean;
  error: UpdateTaskError2;
};

export const UpdateTaskResponseBody2$zodSchema: z.ZodType<
  UpdateTaskResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => UpdateTaskError2$zodSchema),
  success: z.boolean(),
});

export type UpdateTaskPath1 = string | number;

export const UpdateTaskPath1$zodSchema: z.ZodType<
  UpdateTaskPath1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type UpdateTaskIssue1 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const UpdateTaskIssue1$zodSchema: z.ZodType<
  UpdateTaskIssue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type UpdateTaskError1 = {
  issues: Array<UpdateTaskIssue1>;
  name: string;
};

export const UpdateTaskError1$zodSchema: z.ZodType<
  UpdateTaskError1,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => UpdateTaskIssue1$zodSchema)),
  name: z.string(),
});

export type UpdateTaskResponseBody1 = {
  success: boolean;
  error: UpdateTaskError1;
};

export const UpdateTaskResponseBody1$zodSchema: z.ZodType<
  UpdateTaskResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => UpdateTaskError1$zodSchema),
  success: z.boolean(),
});

/**
 * The validation error(s)
 */
export type UpdateTaskResponseBody =
  | UpdateTaskResponseBody1
  | UpdateTaskResponseBody2;

export const UpdateTaskResponseBody$zodSchema: z.ZodType<
  UpdateTaskResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateTaskResponseBody1$zodSchema),
  z.lazy(() => UpdateTaskResponseBody2$zodSchema),
]).describe("The validation error(s)");

export const UpdateTaskType$zodSchema = z.enum([
  "auth_error",
]);

export type UpdateTaskType = z.infer<typeof UpdateTaskType$zodSchema>;

export const UpdateTaskCode$zodSchema = z.enum([
  "missing_scope",
]);

export type UpdateTaskCode = z.infer<typeof UpdateTaskCode$zodSchema>;

/**
 * Missing scope
 */
export type UpdateTaskForbiddenResponseBody = {
  status_code: number;
  type: UpdateTaskType;
  code: UpdateTaskCode;
  message: string;
};

export const UpdateTaskForbiddenResponseBody$zodSchema: z.ZodType<
  UpdateTaskForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: UpdateTaskCode$zodSchema,
  message: z.string(),
  status_code: z.number(),
  type: UpdateTaskType$zodSchema,
}).describe("Missing scope");

export type UpdateTaskResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Task?: Task | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  object?: UpdateTaskForbiddenResponseBody | undefined;
  not_found?: NotFound | undefined;
  oneOf?: UpdateTaskResponseBody1 | UpdateTaskResponseBody2 | undefined;
  rate_limit?: RateLimit | undefined;
};

export const UpdateTaskResponse$zodSchema: z.ZodType<
  UpdateTaskResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Task: Task$zodSchema.optional(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  not_found: NotFound$zodSchema.optional(),
  object: z.lazy(() => UpdateTaskForbiddenResponseBody$zodSchema).optional(),
  oneOf: z.union([
    z.lazy(() => UpdateTaskResponseBody1$zodSchema),
    z.lazy(() => UpdateTaskResponseBody2$zodSchema),
  ]).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
