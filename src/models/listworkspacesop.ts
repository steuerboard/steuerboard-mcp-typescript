/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Pagination, Pagination$zodSchema } from "./pagination.js";
import { Workspace, Workspace$zodSchema } from "./workspace.js";

export type ListWorkspacesRequest = {
  limit?: number | undefined;
  cursor?: string | undefined;
  xClientId: string;
};

export const ListWorkspacesRequest$zodSchema: z.ZodType<
  ListWorkspacesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  limit: z.number().default(20),
  xClientId: z.string(),
});

/**
 * Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers
 */
export type ListWorkspacesTooManyRequestsResponseBody = { message: string };

export const ListWorkspacesTooManyRequestsResponseBody$zodSchema: z.ZodType<
  ListWorkspacesTooManyRequestsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe(
  "Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers",
);

export type ListWorkspacesPath = string | number;

export const ListWorkspacesPath$zodSchema: z.ZodType<
  ListWorkspacesPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type ListWorkspacesIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const ListWorkspacesIssue$zodSchema: z.ZodType<
  ListWorkspacesIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type ListWorkspacesError = {
  issues: Array<ListWorkspacesIssue>;
  name: string;
};

export const ListWorkspacesError$zodSchema: z.ZodType<
  ListWorkspacesError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => ListWorkspacesIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type ListWorkspacesUnprocessableEntityResponseBody = {
  success: boolean;
  error: ListWorkspacesError;
};

export const ListWorkspacesUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  ListWorkspacesUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => ListWorkspacesError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

/**
 * Workspaces
 */
export type ListWorkspacesResponseBody = {
  data: Array<Workspace>;
  pagination: Pagination;
};

export const ListWorkspacesResponseBody$zodSchema: z.ZodType<
  ListWorkspacesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(Workspace$zodSchema),
  pagination: Pagination$zodSchema,
}).describe("Workspaces");

export type ListWorkspacesResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  twoHundredApplicationJsonObject?: ListWorkspacesResponseBody | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | ListWorkspacesUnprocessableEntityResponseBody
    | undefined;
  fourHundredAndTwentyNineApplicationJsonObject?:
    | ListWorkspacesTooManyRequestsResponseBody
    | undefined;
};

export const ListWorkspacesResponse$zodSchema: z.ZodType<
  ListWorkspacesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndTwentyNineApplicationJsonObject: z.lazy(() =>
    ListWorkspacesTooManyRequestsResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    ListWorkspacesUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  twoHundredApplicationJsonObject: z.lazy(() =>
    ListWorkspacesResponseBody$zodSchema
  ).optional(),
});
