/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import {
  PaginatedWorkspaces,
  PaginatedWorkspaces$zodSchema,
} from "./paginatedworkspaces.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type ListWorkspacesRequest = {
  limit?: number | undefined;
  cursor?: string | undefined;
  xClientId: string;
};

export const ListWorkspacesRequest$zodSchema: z.ZodType<
  ListWorkspacesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  limit: z.number().default(20),
  xClientId: z.string(),
});

export type ListWorkspacesPath = string | number;

export const ListWorkspacesPath$zodSchema: z.ZodType<
  ListWorkspacesPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type ListWorkspacesIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const ListWorkspacesIssue$zodSchema: z.ZodType<
  ListWorkspacesIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type ListWorkspacesError = {
  issues: Array<ListWorkspacesIssue>;
  name: string;
};

export const ListWorkspacesError$zodSchema: z.ZodType<
  ListWorkspacesError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => ListWorkspacesIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type ListWorkspacesUnprocessableEntityResponseBody = {
  success: boolean;
  error: ListWorkspacesError;
};

export const ListWorkspacesUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  ListWorkspacesUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => ListWorkspacesError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

export const ListWorkspacesStatusCode$zodSchema = z.literal(403);

export type ListWorkspacesStatusCode = z.infer<
  typeof ListWorkspacesStatusCode$zodSchema
>;

export const ListWorkspacesType$zodSchema = z.enum([
  "auth_error",
]);

export type ListWorkspacesType = z.infer<typeof ListWorkspacesType$zodSchema>;

export const ListWorkspacesCode$zodSchema = z.enum([
  "missing_scope",
]);

export type ListWorkspacesCode = z.infer<typeof ListWorkspacesCode$zodSchema>;

/**
 * Missing scope
 */
export type ListWorkspacesForbiddenResponseBody = {
  status_code: ListWorkspacesStatusCode;
  type: ListWorkspacesType;
  code: ListWorkspacesCode;
  message: string;
};

export const ListWorkspacesForbiddenResponseBody$zodSchema: z.ZodType<
  ListWorkspacesForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: ListWorkspacesCode$zodSchema,
  message: z.string(),
  status_code: ListWorkspacesStatusCode$zodSchema,
  type: ListWorkspacesType$zodSchema,
}).describe("Missing scope");

export type ListWorkspacesResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  PaginatedWorkspaces?: PaginatedWorkspaces | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | ListWorkspacesForbiddenResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | ListWorkspacesUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const ListWorkspacesResponse$zodSchema: z.ZodType<
  ListWorkspacesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  PaginatedWorkspaces: PaginatedWorkspaces$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    ListWorkspacesForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    ListWorkspacesUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
