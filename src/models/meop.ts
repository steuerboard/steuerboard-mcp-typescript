/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export const MeType$zodSchema = z.enum([
  "auth_error",
]);

export type MeType = z.infer<typeof MeType$zodSchema>;

export const MeCode$zodSchema = z.enum([
  "missing_scope",
]);

export type MeCode = z.infer<typeof MeCode$zodSchema>;

/**
 * Missing scope
 */
export type MeForbiddenResponseBody = {
  status_code: number;
  type: MeType;
  code: MeCode;
  message: string;
};

export const MeForbiddenResponseBody$zodSchema: z.ZodType<
  MeForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: MeCode$zodSchema,
  message: z.string(),
  status_code: z.number(),
  type: MeType$zodSchema,
}).describe("Missing scope");

/**
 * Me
 */
export type MeResponseBody = {
  type: string;
  accountantId: string;
  clientId: string | null;
  apiKeyId: string;
  rateLimitMax: number;
  rateLimitTimeWindow: number;
  permissions: Array<string>;
};

export const MeResponseBody$zodSchema: z.ZodType<
  MeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountantId: z.string(),
  apiKeyId: z.string(),
  clientId: z.string().nullable(),
  permissions: z.array(z.string()),
  rateLimitMax: z.number(),
  rateLimitTimeWindow: z.number(),
  type: z.string(),
}).describe("Me");

export type MeResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  twoHundredApplicationJsonObject?: MeResponseBody | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | MeForbiddenResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const MeResponse$zodSchema: z.ZodType<
  MeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    MeForbiddenResponseBody$zodSchema
  ).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
  twoHundredApplicationJsonObject: z.lazy(() => MeResponseBody$zodSchema)
    .optional(),
});
