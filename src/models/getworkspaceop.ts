/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Workspace, Workspace$zodSchema } from "./workspace.js";

export type GetWorkspaceRequest = { id: string; xClientId: string };

export const GetWorkspaceRequest$zodSchema: z.ZodType<
  GetWorkspaceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  xClientId: z.string(),
});

/**
 * Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers
 */
export type GetWorkspaceTooManyRequestsResponseBody = { message: string };

export const GetWorkspaceTooManyRequestsResponseBody$zodSchema: z.ZodType<
  GetWorkspaceTooManyRequestsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe(
  "Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers",
);

export type GetWorkspacePath = string | number;

export const GetWorkspacePath$zodSchema: z.ZodType<
  GetWorkspacePath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type GetWorkspaceIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const GetWorkspaceIssue$zodSchema: z.ZodType<
  GetWorkspaceIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type GetWorkspaceError = {
  issues: Array<GetWorkspaceIssue>;
  name: string;
};

export const GetWorkspaceError$zodSchema: z.ZodType<
  GetWorkspaceError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => GetWorkspaceIssue$zodSchema)),
  name: z.string(),
});

/**
 * Invalid id error
 */
export type GetWorkspaceUnprocessableEntityResponseBody = {
  success: boolean;
  error: GetWorkspaceError;
};

export const GetWorkspaceUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  GetWorkspaceUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => GetWorkspaceError$zodSchema),
  success: z.boolean(),
}).describe("Invalid id error");

/**
 * Workspace not found
 */
export type GetWorkspaceNotFoundResponseBody = { message: string };

export const GetWorkspaceNotFoundResponseBody$zodSchema: z.ZodType<
  GetWorkspaceNotFoundResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe("Workspace not found");

export type GetWorkspaceResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Workspace?: Workspace | undefined;
  fourHundredAndFourApplicationJsonObject?:
    | GetWorkspaceNotFoundResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | GetWorkspaceUnprocessableEntityResponseBody
    | undefined;
  fourHundredAndTwentyNineApplicationJsonObject?:
    | GetWorkspaceTooManyRequestsResponseBody
    | undefined;
};

export const GetWorkspaceResponse$zodSchema: z.ZodType<
  GetWorkspaceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Workspace: Workspace$zodSchema.optional(),
  fourHundredAndFourApplicationJsonObject: z.lazy(() =>
    GetWorkspaceNotFoundResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyNineApplicationJsonObject: z.lazy(() =>
    GetWorkspaceTooManyRequestsResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    GetWorkspaceUnprocessableEntityResponseBody$zodSchema
  ).optional(),
});
