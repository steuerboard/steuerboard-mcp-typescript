/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { DeleteResponse, DeleteResponse$zodSchema } from "./deleteresponse.js";

export type DeleteFileRequest = { id: string; xClientId: string };

export const DeleteFileRequest$zodSchema: z.ZodType<
  DeleteFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  xClientId: z.string(),
});

/**
 * Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers
 */
export type DeleteFileTooManyRequestsResponseBody = { message: string };

export const DeleteFileTooManyRequestsResponseBody$zodSchema: z.ZodType<
  DeleteFileTooManyRequestsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe(
  "Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers",
);

export type DeleteFilePath = string | number;

export const DeleteFilePath$zodSchema: z.ZodType<
  DeleteFilePath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type DeleteFileIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const DeleteFileIssue$zodSchema: z.ZodType<
  DeleteFileIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type DeleteFileError = { issues: Array<DeleteFileIssue>; name: string };

export const DeleteFileError$zodSchema: z.ZodType<
  DeleteFileError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => DeleteFileIssue$zodSchema)),
  name: z.string(),
});

/**
 * Invalid id error
 */
export type DeleteFileUnprocessableEntityResponseBody = {
  success: boolean;
  error: DeleteFileError;
};

export const DeleteFileUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  DeleteFileUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => DeleteFileError$zodSchema),
  success: z.boolean(),
}).describe("Invalid id error");

/**
 * File not found
 */
export type DeleteFileNotFoundResponseBody = { message: string };

export const DeleteFileNotFoundResponseBody$zodSchema: z.ZodType<
  DeleteFileNotFoundResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe("File not found");

export type DeleteFileResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  DeleteResponse?: DeleteResponse | undefined;
  fourHundredAndFourApplicationJsonObject?:
    | DeleteFileNotFoundResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | DeleteFileUnprocessableEntityResponseBody
    | undefined;
  fourHundredAndTwentyNineApplicationJsonObject?:
    | DeleteFileTooManyRequestsResponseBody
    | undefined;
};

export const DeleteFileResponse$zodSchema: z.ZodType<
  DeleteFileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  DeleteResponse: DeleteResponse$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndFourApplicationJsonObject: z.lazy(() =>
    DeleteFileNotFoundResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyNineApplicationJsonObject: z.lazy(() =>
    DeleteFileTooManyRequestsResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    DeleteFileUnprocessableEntityResponseBody$zodSchema
  ).optional(),
});
