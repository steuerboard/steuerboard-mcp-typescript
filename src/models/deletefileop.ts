/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { DeleteResponse, DeleteResponse$zodSchema } from "./deleteresponse.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type DeleteFileRequest = { id: string; xClientId: string };

export const DeleteFileRequest$zodSchema: z.ZodType<
  DeleteFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  xClientId: z.string(),
});

export type DeleteFilePath = string | number;

export const DeleteFilePath$zodSchema: z.ZodType<
  DeleteFilePath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type DeleteFileIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const DeleteFileIssue$zodSchema: z.ZodType<
  DeleteFileIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type DeleteFileError = { issues: Array<DeleteFileIssue>; name: string };

export const DeleteFileError$zodSchema: z.ZodType<
  DeleteFileError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => DeleteFileIssue$zodSchema)),
  name: z.string(),
});

/**
 * Invalid id error
 */
export type DeleteFileUnprocessableEntityResponseBody = {
  success: boolean;
  error: DeleteFileError;
};

export const DeleteFileUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  DeleteFileUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => DeleteFileError$zodSchema),
  success: z.boolean(),
}).describe("Invalid id error");

export const DeleteFileType$zodSchema = z.enum([
  "auth_error",
]);

export type DeleteFileType = z.infer<typeof DeleteFileType$zodSchema>;

export const DeleteFileCode$zodSchema = z.enum([
  "missing_scope",
]);

export type DeleteFileCode = z.infer<typeof DeleteFileCode$zodSchema>;

/**
 * Missing scope
 */
export type DeleteFileForbiddenResponseBody = {
  status_code: number;
  type: DeleteFileType;
  code: DeleteFileCode;
  message: string;
};

export const DeleteFileForbiddenResponseBody$zodSchema: z.ZodType<
  DeleteFileForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: DeleteFileCode$zodSchema,
  message: z.string(),
  status_code: z.number(),
  type: DeleteFileType$zodSchema,
}).describe("Missing scope");

export type DeleteFileResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  DeleteResponse?: DeleteResponse | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | DeleteFileForbiddenResponseBody
    | undefined;
  not_found?: NotFound | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | DeleteFileUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const DeleteFileResponse$zodSchema: z.ZodType<
  DeleteFileResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  DeleteResponse: DeleteResponse$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    DeleteFileForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    DeleteFileUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  not_found: NotFound$zodSchema.optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
