/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { FileT, FileT$zodSchema } from "./file.js";
import { Pagination, Pagination$zodSchema } from "./pagination.js";

export type ListFilesRequest = {
  limit?: number | undefined;
  cursor?: string | undefined;
  workspaceId?: string | undefined;
  xClientId: string;
};

export const ListFilesRequest$zodSchema: z.ZodType<
  ListFilesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  limit: z.number().default(20),
  workspaceId: z.string().optional(),
  xClientId: z.string(),
});

/**
 * Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers
 */
export type ListFilesTooManyRequestsResponseBody = { message: string };

export const ListFilesTooManyRequestsResponseBody$zodSchema: z.ZodType<
  ListFilesTooManyRequestsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe(
  "Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers",
);

export type ListFilesPath = string | number;

export const ListFilesPath$zodSchema: z.ZodType<
  ListFilesPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type ListFilesIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const ListFilesIssue$zodSchema: z.ZodType<
  ListFilesIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type ListFilesError = { issues: Array<ListFilesIssue>; name: string };

export const ListFilesError$zodSchema: z.ZodType<
  ListFilesError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => ListFilesIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type ListFilesUnprocessableEntityResponseBody = {
  success: boolean;
  error: ListFilesError;
};

export const ListFilesUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  ListFilesUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => ListFilesError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

/**
 * Paginated files
 */
export type ListFilesResponseBody = {
  data: Array<FileT>;
  pagination: Pagination;
};

export const ListFilesResponseBody$zodSchema: z.ZodType<
  ListFilesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(FileT$zodSchema),
  pagination: Pagination$zodSchema,
}).describe("Paginated files");

export type ListFilesResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  twoHundredApplicationJsonObject?: ListFilesResponseBody | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | ListFilesUnprocessableEntityResponseBody
    | undefined;
  fourHundredAndTwentyNineApplicationJsonObject?:
    | ListFilesTooManyRequestsResponseBody
    | undefined;
};

export const ListFilesResponse$zodSchema: z.ZodType<
  ListFilesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndTwentyNineApplicationJsonObject: z.lazy(() =>
    ListFilesTooManyRequestsResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    ListFilesUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  twoHundredApplicationJsonObject: z.lazy(() => ListFilesResponseBody$zodSchema)
    .optional(),
});
