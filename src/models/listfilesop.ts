/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { PaginatedFiles, PaginatedFiles$zodSchema } from "./paginatedfiles.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type ListFilesRequest = {
  limit?: number | undefined;
  cursor?: string | undefined;
  workspaceId?: string | undefined;
  xClientId: string;
};

export const ListFilesRequest$zodSchema: z.ZodType<
  ListFilesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  limit: z.number().default(20),
  workspaceId: z.string().optional(),
  xClientId: z.string(),
});

export type ListFilesPath = string | number;

export const ListFilesPath$zodSchema: z.ZodType<
  ListFilesPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type ListFilesIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const ListFilesIssue$zodSchema: z.ZodType<
  ListFilesIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type ListFilesError = { issues: Array<ListFilesIssue>; name: string };

export const ListFilesError$zodSchema: z.ZodType<
  ListFilesError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => ListFilesIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type ListFilesUnprocessableEntityResponseBody = {
  success: boolean;
  error: ListFilesError;
};

export const ListFilesUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  ListFilesUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => ListFilesError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

export const ListFilesType$zodSchema = z.enum([
  "auth_error",
]);

export type ListFilesType = z.infer<typeof ListFilesType$zodSchema>;

export const ListFilesCode$zodSchema = z.enum([
  "missing_scope",
]);

export type ListFilesCode = z.infer<typeof ListFilesCode$zodSchema>;

/**
 * Missing scope
 */
export type ListFilesForbiddenResponseBody = {
  status_code: number;
  type: ListFilesType;
  code: ListFilesCode;
  message: string;
};

export const ListFilesForbiddenResponseBody$zodSchema: z.ZodType<
  ListFilesForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: ListFilesCode$zodSchema,
  message: z.string(),
  status_code: z.number(),
  type: ListFilesType$zodSchema,
}).describe("Missing scope");

export type ListFilesResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  PaginatedFiles?: PaginatedFiles | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | ListFilesForbiddenResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | ListFilesUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const ListFilesResponse$zodSchema: z.ZodType<
  ListFilesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  PaginatedFiles: PaginatedFiles$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    ListFilesForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    ListFilesUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
