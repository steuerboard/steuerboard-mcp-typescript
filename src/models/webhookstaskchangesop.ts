/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export const WebhooksTaskChangesAction2$zodSchema = z.enum([
  "CREATED",
  "UPDATED",
  "DELETED",
  "ARCHIVED",
]);

export type WebhooksTaskChangesAction2 = z.infer<
  typeof WebhooksTaskChangesAction2$zodSchema
>;

export const WebhooksTaskChangesResource2$zodSchema = z.enum([
  "TASK",
]);

export type WebhooksTaskChangesResource2 = z.infer<
  typeof WebhooksTaskChangesResource2$zodSchema
>;

export type WebhooksTaskChangesData2 = {
  id: string;
  createdAt: string;
  updatedAt: string;
  title: string;
  text: string | null;
  status: string;
  dueDate: string | null;
  destinationFolderId: string | null;
  assetFileIds: Array<string>;
  labelIds: Array<string> | null;
  workspaceId: string;
};

export const WebhooksTaskChangesData2$zodSchema: z.ZodType<
  WebhooksTaskChangesData2,
  z.ZodTypeDef,
  unknown
> = z.object({
  assetFileIds: z.array(z.string()),
  createdAt: z.string(),
  destinationFolderId: z.string().nullable(),
  dueDate: z.string().nullable(),
  id: z.string(),
  labelIds: z.array(z.string()).nullable(),
  status: z.string(),
  text: z.string().nullable(),
  title: z.string(),
  updatedAt: z.string(),
  workspaceId: z.string(),
});

export type WebhooksTaskChangesPreviousData = {
  id: string;
  createdAt: string;
  updatedAt: string;
  title: string;
  text: string | null;
  status: string;
  dueDate: string | null;
  destinationFolderId: string | null;
  assetFileIds: Array<string>;
  labelIds: Array<string> | null;
  workspaceId: string;
};

export const WebhooksTaskChangesPreviousData$zodSchema: z.ZodType<
  WebhooksTaskChangesPreviousData,
  z.ZodTypeDef,
  unknown
> = z.object({
  assetFileIds: z.array(z.string()),
  createdAt: z.string(),
  destinationFolderId: z.string().nullable(),
  dueDate: z.string().nullable(),
  id: z.string(),
  labelIds: z.array(z.string()).nullable(),
  status: z.string(),
  text: z.string().nullable(),
  title: z.string(),
  updatedAt: z.string(),
  workspaceId: z.string(),
});

export type WebhooksTaskChangesTask2 = {
  eventTimestamp: string;
  action: WebhooksTaskChangesAction2;
  clientId: string;
  workspaceId: string | null;
  resource: WebhooksTaskChangesResource2;
  data: WebhooksTaskChangesData2;
  previousData: WebhooksTaskChangesPreviousData;
};

export const WebhooksTaskChangesTask2$zodSchema: z.ZodType<
  WebhooksTaskChangesTask2,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: WebhooksTaskChangesAction2$zodSchema,
  clientId: z.string(),
  data: z.lazy(() => WebhooksTaskChangesData2$zodSchema),
  eventTimestamp: z.string(),
  previousData: z.lazy(() => WebhooksTaskChangesPreviousData$zodSchema),
  resource: WebhooksTaskChangesResource2$zodSchema,
  workspaceId: z.string().nullable(),
});

export const WebhooksTaskChangesAction1$zodSchema = z.enum([
  "CREATED",
  "UPDATED",
  "DELETED",
  "ARCHIVED",
]);

export type WebhooksTaskChangesAction1 = z.infer<
  typeof WebhooksTaskChangesAction1$zodSchema
>;

export const WebhooksTaskChangesResource1$zodSchema = z.enum([
  "TASK",
]);

export type WebhooksTaskChangesResource1 = z.infer<
  typeof WebhooksTaskChangesResource1$zodSchema
>;

export type WebhooksTaskChangesData1 = {
  id: string;
  createdAt: string;
  updatedAt: string;
  title: string;
  text: string | null;
  status: string;
  dueDate: string | null;
  destinationFolderId: string | null;
  assetFileIds: Array<string>;
  labelIds: Array<string> | null;
  workspaceId: string;
};

export const WebhooksTaskChangesData1$zodSchema: z.ZodType<
  WebhooksTaskChangesData1,
  z.ZodTypeDef,
  unknown
> = z.object({
  assetFileIds: z.array(z.string()),
  createdAt: z.string(),
  destinationFolderId: z.string().nullable(),
  dueDate: z.string().nullable(),
  id: z.string(),
  labelIds: z.array(z.string()).nullable(),
  status: z.string(),
  text: z.string().nullable(),
  title: z.string(),
  updatedAt: z.string(),
  workspaceId: z.string(),
});

export type WebhooksTaskChangesTask1 = {
  eventTimestamp: string;
  action: WebhooksTaskChangesAction1;
  clientId: string;
  workspaceId: string | null;
  resource: WebhooksTaskChangesResource1;
  data: WebhooksTaskChangesData1;
};

export const WebhooksTaskChangesTask1$zodSchema: z.ZodType<
  WebhooksTaskChangesTask1,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: WebhooksTaskChangesAction1$zodSchema,
  clientId: z.string(),
  data: z.lazy(() => WebhooksTaskChangesData1$zodSchema),
  eventTimestamp: z.string(),
  resource: WebhooksTaskChangesResource1$zodSchema,
  workspaceId: z.string().nullable(),
});

/**
 * Task Webhook (create|update)
 */
export type WebhooksTaskChangesRequest =
  | WebhooksTaskChangesTask1
  | WebhooksTaskChangesTask2;

export const WebhooksTaskChangesRequest$zodSchema: z.ZodType<
  WebhooksTaskChangesRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => WebhooksTaskChangesTask1$zodSchema),
  z.lazy(() => WebhooksTaskChangesTask2$zodSchema),
]).describe("Task Webhook (create|update)");

export type WebhooksTaskChangesResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
};

export const WebhooksTaskChangesResponse$zodSchema: z.ZodType<
  WebhooksTaskChangesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
