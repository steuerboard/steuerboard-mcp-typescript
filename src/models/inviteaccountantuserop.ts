/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AccountantUser, AccountantUser$zodSchema } from "./accountantuser.js";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type InviteAccountantUserPath = string | number;

export const InviteAccountantUserPath$zodSchema: z.ZodType<
  InviteAccountantUserPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type InviteAccountantUserIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const InviteAccountantUserIssue$zodSchema: z.ZodType<
  InviteAccountantUserIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type InviteAccountantUserError = {
  issues: Array<InviteAccountantUserIssue>;
  name: string;
};

export const InviteAccountantUserError$zodSchema: z.ZodType<
  InviteAccountantUserError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => InviteAccountantUserIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type InviteAccountantUserUnprocessableEntityResponseBody = {
  success: boolean;
  error: InviteAccountantUserError;
};

export const InviteAccountantUserUnprocessableEntityResponseBody$zodSchema:
  z.ZodType<
    InviteAccountantUserUnprocessableEntityResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.lazy(() => InviteAccountantUserError$zodSchema),
    success: z.boolean(),
  }).describe("The validation error(s)");

export const InviteAccountantUserStatusCode$zodSchema = z.literal(403);

export type InviteAccountantUserStatusCode = z.infer<
  typeof InviteAccountantUserStatusCode$zodSchema
>;

export const InviteAccountantUserType$zodSchema = z.enum([
  "auth_error",
]);

export type InviteAccountantUserType = z.infer<
  typeof InviteAccountantUserType$zodSchema
>;

export const InviteAccountantUserCode$zodSchema = z.enum([
  "missing_scope",
]);

export type InviteAccountantUserCode = z.infer<
  typeof InviteAccountantUserCode$zodSchema
>;

/**
 * Missing scope
 */
export type InviteAccountantUserForbiddenResponseBody = {
  status_code: InviteAccountantUserStatusCode;
  type: InviteAccountantUserType;
  code: InviteAccountantUserCode;
  message: string;
};

export const InviteAccountantUserForbiddenResponseBody$zodSchema: z.ZodType<
  InviteAccountantUserForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: InviteAccountantUserCode$zodSchema,
  message: z.string(),
  status_code: InviteAccountantUserStatusCode$zodSchema,
  type: InviteAccountantUserType$zodSchema,
}).describe("Missing scope");

export type InviteAccountantUserResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  AccountantUser?: AccountantUser | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | InviteAccountantUserForbiddenResponseBody
    | undefined;
  not_found?: NotFound | undefined;
  conflict?: Conflict | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | InviteAccountantUserUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const InviteAccountantUserResponse$zodSchema: z.ZodType<
  InviteAccountantUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  AccountantUser: AccountantUser$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  conflict: Conflict$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    InviteAccountantUserForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    InviteAccountantUserUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  not_found: NotFound$zodSchema.optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
