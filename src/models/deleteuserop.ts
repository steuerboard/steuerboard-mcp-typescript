/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { DeleteResponse, DeleteResponse$zodSchema } from "./deleteresponse.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type DeleteUserRequest = { id: string; xClientId: string };

export const DeleteUserRequest$zodSchema: z.ZodType<
  DeleteUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  xClientId: z.string(),
});

export type DeleteUserPath2 = string | number;

export const DeleteUserPath2$zodSchema: z.ZodType<
  DeleteUserPath2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type DeleteUserIssue2 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const DeleteUserIssue2$zodSchema: z.ZodType<
  DeleteUserIssue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type DeleteUserError2 = {
  issues: Array<DeleteUserIssue2>;
  name: string;
};

export const DeleteUserError2$zodSchema: z.ZodType<
  DeleteUserError2,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => DeleteUserIssue2$zodSchema)),
  name: z.string(),
});

export type DeleteUserResponseBody2 = {
  success: boolean;
  error: DeleteUserError2;
};

export const DeleteUserResponseBody2$zodSchema: z.ZodType<
  DeleteUserResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => DeleteUserError2$zodSchema),
  success: z.boolean(),
});

export type DeleteUserPath1 = string | number;

export const DeleteUserPath1$zodSchema: z.ZodType<
  DeleteUserPath1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type DeleteUserIssue1 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const DeleteUserIssue1$zodSchema: z.ZodType<
  DeleteUserIssue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type DeleteUserError1 = {
  issues: Array<DeleteUserIssue1>;
  name: string;
};

export const DeleteUserError1$zodSchema: z.ZodType<
  DeleteUserError1,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => DeleteUserIssue1$zodSchema)),
  name: z.string(),
});

export type DeleteUserResponseBody1 = {
  success: boolean;
  error: DeleteUserError1;
};

export const DeleteUserResponseBody1$zodSchema: z.ZodType<
  DeleteUserResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => DeleteUserError1$zodSchema),
  success: z.boolean(),
});

/**
 * The validation error(s)
 */
export type DeleteUserResponseBody =
  | DeleteUserResponseBody1
  | DeleteUserResponseBody2;

export const DeleteUserResponseBody$zodSchema: z.ZodType<
  DeleteUserResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeleteUserResponseBody1$zodSchema),
  z.lazy(() => DeleteUserResponseBody2$zodSchema),
]).describe("The validation error(s)");

export const DeleteUserStatusCode$zodSchema = z.literal(403);

export type DeleteUserStatusCode = z.infer<
  typeof DeleteUserStatusCode$zodSchema
>;

export const DeleteUserType$zodSchema = z.enum([
  "auth_error",
]);

export type DeleteUserType = z.infer<typeof DeleteUserType$zodSchema>;

export const DeleteUserCode$zodSchema = z.enum([
  "missing_scope",
]);

export type DeleteUserCode = z.infer<typeof DeleteUserCode$zodSchema>;

/**
 * Missing scope
 */
export type DeleteUserForbiddenResponseBody = {
  status_code: DeleteUserStatusCode;
  type: DeleteUserType;
  code: DeleteUserCode;
  message: string;
};

export const DeleteUserForbiddenResponseBody$zodSchema: z.ZodType<
  DeleteUserForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: DeleteUserCode$zodSchema,
  message: z.string(),
  status_code: DeleteUserStatusCode$zodSchema,
  type: DeleteUserType$zodSchema,
}).describe("Missing scope");

export type DeleteUserResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  DeleteResponse?: DeleteResponse | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  object?: DeleteUserForbiddenResponseBody | undefined;
  not_found?: NotFound | undefined;
  oneOf?: DeleteUserResponseBody1 | DeleteUserResponseBody2 | undefined;
  rate_limit?: RateLimit | undefined;
};

export const DeleteUserResponse$zodSchema: z.ZodType<
  DeleteUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  DeleteResponse: DeleteResponse$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  not_found: NotFound$zodSchema.optional(),
  object: z.lazy(() => DeleteUserForbiddenResponseBody$zodSchema).optional(),
  oneOf: z.union([
    z.lazy(() => DeleteUserResponseBody1$zodSchema),
    z.lazy(() => DeleteUserResponseBody2$zodSchema),
  ]).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
