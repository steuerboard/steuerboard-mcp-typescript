/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";
import {
  WorkspaceMember,
  WorkspaceMember$zodSchema,
} from "./workspacemember.js";

export type ListWorkspaceMembersRequest = { id: string; xClientId: string };

export const ListWorkspaceMembersRequest$zodSchema: z.ZodType<
  ListWorkspaceMembersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  xClientId: z.string(),
});

export type ListWorkspaceMembersPath = string | number;

export const ListWorkspaceMembersPath$zodSchema: z.ZodType<
  ListWorkspaceMembersPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type ListWorkspaceMembersIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const ListWorkspaceMembersIssue$zodSchema: z.ZodType<
  ListWorkspaceMembersIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type ListWorkspaceMembersError = {
  issues: Array<ListWorkspaceMembersIssue>;
  name: string;
};

export const ListWorkspaceMembersError$zodSchema: z.ZodType<
  ListWorkspaceMembersError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => ListWorkspaceMembersIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type ListWorkspaceMembersUnprocessableEntityResponseBody = {
  success: boolean;
  error: ListWorkspaceMembersError;
};

export const ListWorkspaceMembersUnprocessableEntityResponseBody$zodSchema:
  z.ZodType<
    ListWorkspaceMembersUnprocessableEntityResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.lazy(() => ListWorkspaceMembersError$zodSchema),
    success: z.boolean(),
  }).describe("The validation error(s)");

export const ListWorkspaceMembersStatusCode$zodSchema = z.literal(403);

export type ListWorkspaceMembersStatusCode = z.infer<
  typeof ListWorkspaceMembersStatusCode$zodSchema
>;

export const ListWorkspaceMembersType$zodSchema = z.enum([
  "auth_error",
]);

export type ListWorkspaceMembersType = z.infer<
  typeof ListWorkspaceMembersType$zodSchema
>;

export const ListWorkspaceMembersCode$zodSchema = z.enum([
  "missing_scope",
]);

export type ListWorkspaceMembersCode = z.infer<
  typeof ListWorkspaceMembersCode$zodSchema
>;

/**
 * Missing scope
 */
export type ListWorkspaceMembersForbiddenResponseBody = {
  status_code: ListWorkspaceMembersStatusCode;
  type: ListWorkspaceMembersType;
  code: ListWorkspaceMembersCode;
  message: string;
};

export const ListWorkspaceMembersForbiddenResponseBody$zodSchema: z.ZodType<
  ListWorkspaceMembersForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: ListWorkspaceMembersCode$zodSchema,
  message: z.string(),
  status_code: ListWorkspaceMembersStatusCode$zodSchema,
  type: ListWorkspaceMembersType$zodSchema,
}).describe("Missing scope");

export type ListWorkspaceMembersResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  twoHundredApplicationJsonWorkspaceMembers?:
    | Array<WorkspaceMember>
    | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | ListWorkspaceMembersForbiddenResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | ListWorkspaceMembersUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const ListWorkspaceMembersResponse$zodSchema: z.ZodType<
  ListWorkspaceMembersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    ListWorkspaceMembersForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    ListWorkspaceMembersUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
  twoHundredApplicationJsonWorkspaceMembers: z.array(WorkspaceMember$zodSchema)
    .describe("Workspace members").optional(),
});
