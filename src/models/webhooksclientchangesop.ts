/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export const WebhooksClientChangesAction2$zodSchema = z.enum([
  "CREATED",
  "UPDATED",
  "DELETED",
  "ARCHIVED",
]);

export type WebhooksClientChangesAction2 = z.infer<
  typeof WebhooksClientChangesAction2$zodSchema
>;

export const WebhooksClientChangesResource2$zodSchema = z.enum([
  "CLIENT",
]);

export type WebhooksClientChangesResource2 = z.infer<
  typeof WebhooksClientChangesResource2$zodSchema
>;

export const DataType2$zodSchema = z.enum([
  "natural_person",
  "individual_enterprise",
  "legal_person",
]);

export type DataType2 = z.infer<typeof DataType2$zodSchema>;

export type WebhooksClientChangesData2 = {
  id: string;
  name: string;
  slug: string;
  type: DataType2;
  customId: string | null;
  legalName: string | null;
  archivedAt: string | null;
  datevClientId: string | null;
  createdAt: string;
  updatedAt: string;
};

export const WebhooksClientChangesData2$zodSchema: z.ZodType<
  WebhooksClientChangesData2,
  z.ZodTypeDef,
  unknown
> = z.object({
  archivedAt: z.string().nullable(),
  createdAt: z.string(),
  customId: z.string().nullable(),
  datevClientId: z.string().nullable(),
  id: z.string(),
  legalName: z.string().nullable(),
  name: z.string(),
  slug: z.string(),
  type: DataType2$zodSchema,
  updatedAt: z.string(),
});

export const PreviousDataType$zodSchema = z.enum([
  "natural_person",
  "individual_enterprise",
  "legal_person",
]);

export type PreviousDataType = z.infer<typeof PreviousDataType$zodSchema>;

export type WebhooksClientChangesPreviousData = {
  id: string;
  name: string;
  slug: string;
  type: PreviousDataType;
  customId: string | null;
  legalName: string | null;
  archivedAt: string | null;
  datevClientId: string | null;
  createdAt: string;
  updatedAt: string;
};

export const WebhooksClientChangesPreviousData$zodSchema: z.ZodType<
  WebhooksClientChangesPreviousData,
  z.ZodTypeDef,
  unknown
> = z.object({
  archivedAt: z.string().nullable(),
  createdAt: z.string(),
  customId: z.string().nullable(),
  datevClientId: z.string().nullable(),
  id: z.string(),
  legalName: z.string().nullable(),
  name: z.string(),
  slug: z.string(),
  type: PreviousDataType$zodSchema,
  updatedAt: z.string(),
});

export type WebhooksClientChangesClient2 = {
  eventTimestamp: string;
  action: WebhooksClientChangesAction2;
  clientId: string;
  workspaceId: string | null;
  resource: WebhooksClientChangesResource2;
  data: WebhooksClientChangesData2;
  previousData: WebhooksClientChangesPreviousData;
};

export const WebhooksClientChangesClient2$zodSchema: z.ZodType<
  WebhooksClientChangesClient2,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: WebhooksClientChangesAction2$zodSchema,
  clientId: z.string(),
  data: z.lazy(() => WebhooksClientChangesData2$zodSchema),
  eventTimestamp: z.string(),
  previousData: z.lazy(() => WebhooksClientChangesPreviousData$zodSchema),
  resource: WebhooksClientChangesResource2$zodSchema,
  workspaceId: z.string().nullable(),
});

export const WebhooksClientChangesAction1$zodSchema = z.enum([
  "CREATED",
  "UPDATED",
  "DELETED",
  "ARCHIVED",
]);

export type WebhooksClientChangesAction1 = z.infer<
  typeof WebhooksClientChangesAction1$zodSchema
>;

export const WebhooksClientChangesResource1$zodSchema = z.enum([
  "CLIENT",
]);

export type WebhooksClientChangesResource1 = z.infer<
  typeof WebhooksClientChangesResource1$zodSchema
>;

export const DataType1$zodSchema = z.enum([
  "natural_person",
  "individual_enterprise",
  "legal_person",
]);

export type DataType1 = z.infer<typeof DataType1$zodSchema>;

export type WebhooksClientChangesData1 = {
  id: string;
  name: string;
  slug: string;
  type: DataType1;
  customId: string | null;
  legalName: string | null;
  archivedAt: string | null;
  datevClientId: string | null;
  createdAt: string;
  updatedAt: string;
};

export const WebhooksClientChangesData1$zodSchema: z.ZodType<
  WebhooksClientChangesData1,
  z.ZodTypeDef,
  unknown
> = z.object({
  archivedAt: z.string().nullable(),
  createdAt: z.string(),
  customId: z.string().nullable(),
  datevClientId: z.string().nullable(),
  id: z.string(),
  legalName: z.string().nullable(),
  name: z.string(),
  slug: z.string(),
  type: DataType1$zodSchema,
  updatedAt: z.string(),
});

export type WebhooksClientChangesClient1 = {
  eventTimestamp: string;
  action: WebhooksClientChangesAction1;
  clientId: string;
  workspaceId: string | null;
  resource: WebhooksClientChangesResource1;
  data: WebhooksClientChangesData1;
};

export const WebhooksClientChangesClient1$zodSchema: z.ZodType<
  WebhooksClientChangesClient1,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: WebhooksClientChangesAction1$zodSchema,
  clientId: z.string(),
  data: z.lazy(() => WebhooksClientChangesData1$zodSchema),
  eventTimestamp: z.string(),
  resource: WebhooksClientChangesResource1$zodSchema,
  workspaceId: z.string().nullable(),
});

/**
 * Client Webhook (create|update)
 */
export type WebhooksClientChangesRequest =
  | WebhooksClientChangesClient1
  | WebhooksClientChangesClient2;

export const WebhooksClientChangesRequest$zodSchema: z.ZodType<
  WebhooksClientChangesRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => WebhooksClientChangesClient1$zodSchema),
  z.lazy(() => WebhooksClientChangesClient2$zodSchema),
]).describe("Client Webhook (create|update)");

export type WebhooksClientChangesResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
};

export const WebhooksClientChangesResponse$zodSchema: z.ZodType<
  WebhooksClientChangesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
