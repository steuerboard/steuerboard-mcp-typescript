/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Task, Task$zodSchema } from "./task.js";

export type DeleteTaskRequest = { id: string };

export const DeleteTaskRequest$zodSchema: z.ZodType<
  DeleteTaskRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

export type DeleteTaskPath = string | number;

export const DeleteTaskPath$zodSchema: z.ZodType<
  DeleteTaskPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type DeleteTaskIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const DeleteTaskIssue$zodSchema: z.ZodType<
  DeleteTaskIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type DeleteTaskError = { issues: Array<DeleteTaskIssue>; name: string };

export const DeleteTaskError$zodSchema: z.ZodType<
  DeleteTaskError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => DeleteTaskIssue$zodSchema)),
  name: z.string(),
});

/**
 * Invalid id error
 */
export type DeleteTaskUnprocessableEntityResponseBody = {
  success: boolean;
  error: DeleteTaskError;
};

export const DeleteTaskUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  DeleteTaskUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => DeleteTaskError$zodSchema),
  success: z.boolean(),
}).describe("Invalid id error");

/**
 * Task not found
 */
export type DeleteTaskNotFoundResponseBody = { message: string };

export const DeleteTaskNotFoundResponseBody$zodSchema: z.ZodType<
  DeleteTaskNotFoundResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe("Task not found");

export type DeleteTaskResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Task?: Task | undefined;
  fourHundredAndFourApplicationJsonObject?:
    | DeleteTaskNotFoundResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | DeleteTaskUnprocessableEntityResponseBody
    | undefined;
};

export const DeleteTaskResponse$zodSchema: z.ZodType<
  DeleteTaskResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Task: Task$zodSchema.optional(),
  fourHundredAndFourApplicationJsonObject: z.lazy(() =>
    DeleteTaskNotFoundResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    DeleteTaskUnprocessableEntityResponseBody$zodSchema
  ).optional(),
});
