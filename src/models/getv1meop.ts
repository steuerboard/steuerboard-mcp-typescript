/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Me
 */
export type GetV1MeResponseBody = {
  type: string;
  accountantId: string;
  clientId: string | null;
  apiKeyId: string;
  rateLimitMax: number;
  rateLimitTimeWindow: number;
  permissions: Array<string>;
};

export const GetV1MeResponseBody$zodSchema: z.ZodType<
  GetV1MeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountantId: z.string(),
  apiKeyId: z.string(),
  clientId: z.string().nullable(),
  permissions: z.array(z.string()),
  rateLimitMax: z.number(),
  rateLimitTimeWindow: z.number(),
  type: z.string(),
}).describe("Me");

export type GetV1MeResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: GetV1MeResponseBody | undefined;
};

export const GetV1MeResponse$zodSchema: z.ZodType<
  GetV1MeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.lazy(() => GetV1MeResponseBody$zodSchema).optional(),
});
