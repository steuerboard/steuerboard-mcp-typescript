/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { PaginatedTasks, PaginatedTasks$zodSchema } from "./paginatedtasks.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

/**
 * The sort field of the results
 */
export const ListTasksSort$zodSchema = z.enum([
  "createdAt",
  "updatedAt",
  "dueDate",
  "status",
  "title",
]).describe("The sort field of the results");

export type ListTasksSort = z.infer<typeof ListTasksSort$zodSchema>;

/**
 * The order of the results based on the sort field
 */
export const ListTasksOrder$zodSchema = z.enum([
  "asc",
  "desc",
]).describe("The order of the results based on the sort field");

export type ListTasksOrder = z.infer<typeof ListTasksOrder$zodSchema>;

export type ListTasksRequest = {
  limit?: number | undefined;
  cursor?: string | undefined;
  workspaceId?: string | undefined;
  parentId?: string | undefined;
  sort?: ListTasksSort | undefined;
  order?: ListTasksOrder | undefined;
  xClientId: string;
};

export const ListTasksRequest$zodSchema: z.ZodType<
  ListTasksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  limit: z.number().default(20),
  order: ListTasksOrder$zodSchema.default("desc"),
  parentId: z.string().optional(),
  sort: ListTasksSort$zodSchema.default("createdAt"),
  workspaceId: z.string().optional(),
  xClientId: z.string(),
});

export type ListTasksPath = string | number;

export const ListTasksPath$zodSchema: z.ZodType<
  ListTasksPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type ListTasksIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const ListTasksIssue$zodSchema: z.ZodType<
  ListTasksIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type ListTasksError = { issues: Array<ListTasksIssue>; name: string };

export const ListTasksError$zodSchema: z.ZodType<
  ListTasksError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => ListTasksIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type ListTasksUnprocessableEntityResponseBody = {
  success: boolean;
  error: ListTasksError;
};

export const ListTasksUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  ListTasksUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => ListTasksError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

export const ListTasksStatusCode$zodSchema = z.literal(403);

export type ListTasksStatusCode = z.infer<typeof ListTasksStatusCode$zodSchema>;

export const ListTasksType$zodSchema = z.enum([
  "auth_error",
]);

export type ListTasksType = z.infer<typeof ListTasksType$zodSchema>;

export const ListTasksCode$zodSchema = z.enum([
  "missing_scope",
]);

export type ListTasksCode = z.infer<typeof ListTasksCode$zodSchema>;

/**
 * Missing scope
 */
export type ListTasksForbiddenResponseBody = {
  status_code: ListTasksStatusCode;
  type: ListTasksType;
  code: ListTasksCode;
  message: string;
};

export const ListTasksForbiddenResponseBody$zodSchema: z.ZodType<
  ListTasksForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: ListTasksCode$zodSchema,
  message: z.string(),
  status_code: ListTasksStatusCode$zodSchema,
  type: ListTasksType$zodSchema,
}).describe("Missing scope");

export type ListTasksResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  PaginatedTasks?: PaginatedTasks | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | ListTasksForbiddenResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | ListTasksUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const ListTasksResponse$zodSchema: z.ZodType<
  ListTasksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  PaginatedTasks: PaginatedTasks$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    ListTasksForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    ListTasksUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
