/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Pagination, Pagination$zodSchema } from "./pagination.js";
import { Task, Task$zodSchema } from "./task.js";

export type ListTasksRequest = {
  limit?: number | undefined;
  cursor?: string | undefined;
  workspaceId?: string | undefined;
};

export const ListTasksRequest$zodSchema: z.ZodType<
  ListTasksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  limit: z.number().default(20),
  workspaceId: z.string().optional(),
});

export type ListTasksPath = string | number;

export const ListTasksPath$zodSchema: z.ZodType<
  ListTasksPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type ListTasksIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const ListTasksIssue$zodSchema: z.ZodType<
  ListTasksIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type ListTasksError = { issues: Array<ListTasksIssue>; name: string };

export const ListTasksError$zodSchema: z.ZodType<
  ListTasksError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => ListTasksIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type ListTasksUnprocessableEntityResponseBody = {
  success: boolean;
  error: ListTasksError;
};

export const ListTasksUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  ListTasksUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => ListTasksError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

/**
 * Tasks
 */
export type ListTasksResponseBody = {
  data: Array<Task>;
  pagination: Pagination;
};

export const ListTasksResponseBody$zodSchema: z.ZodType<
  ListTasksResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(Task$zodSchema),
  pagination: Pagination$zodSchema,
}).describe("Tasks");

export type ListTasksResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  twoHundredApplicationJsonObject?: ListTasksResponseBody | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | ListTasksUnprocessableEntityResponseBody
    | undefined;
};

export const ListTasksResponse$zodSchema: z.ZodType<
  ListTasksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    ListTasksUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  twoHundredApplicationJsonObject: z.lazy(() => ListTasksResponseBody$zodSchema)
    .optional(),
});
