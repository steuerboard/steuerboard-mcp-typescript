/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";
import { Workspace, Workspace$zodSchema } from "./workspace.js";
import {
  WorkspaceCreate,
  WorkspaceCreate$zodSchema,
} from "./workspacecreate.js";

export type CreateWorkspaceRequest = {
  xClientId: string;
  WorkspaceCreate: WorkspaceCreate;
};

export const CreateWorkspaceRequest$zodSchema: z.ZodType<
  CreateWorkspaceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  WorkspaceCreate: WorkspaceCreate$zodSchema,
  xClientId: z.string(),
});

export type CreateWorkspacePath = string | number;

export const CreateWorkspacePath$zodSchema: z.ZodType<
  CreateWorkspacePath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type CreateWorkspaceIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const CreateWorkspaceIssue$zodSchema: z.ZodType<
  CreateWorkspaceIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type CreateWorkspaceError = {
  issues: Array<CreateWorkspaceIssue>;
  name: string;
};

export const CreateWorkspaceError$zodSchema: z.ZodType<
  CreateWorkspaceError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => CreateWorkspaceIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type CreateWorkspaceUnprocessableEntityResponseBody = {
  success: boolean;
  error: CreateWorkspaceError;
};

export const CreateWorkspaceUnprocessableEntityResponseBody$zodSchema:
  z.ZodType<
    CreateWorkspaceUnprocessableEntityResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.lazy(() => CreateWorkspaceError$zodSchema),
    success: z.boolean(),
  }).describe("The validation error(s)");

export const CreateWorkspaceStatusCode$zodSchema = z.literal(403);

export type CreateWorkspaceStatusCode = z.infer<
  typeof CreateWorkspaceStatusCode$zodSchema
>;

export const CreateWorkspaceType$zodSchema = z.enum([
  "auth_error",
]);

export type CreateWorkspaceType = z.infer<typeof CreateWorkspaceType$zodSchema>;

export const CreateWorkspaceCode$zodSchema = z.enum([
  "missing_scope",
]);

export type CreateWorkspaceCode = z.infer<typeof CreateWorkspaceCode$zodSchema>;

/**
 * Missing scope
 */
export type CreateWorkspaceForbiddenResponseBody = {
  status_code: CreateWorkspaceStatusCode;
  type: CreateWorkspaceType;
  code: CreateWorkspaceCode;
  message: string;
};

export const CreateWorkspaceForbiddenResponseBody$zodSchema: z.ZodType<
  CreateWorkspaceForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: CreateWorkspaceCode$zodSchema,
  message: z.string(),
  status_code: CreateWorkspaceStatusCode$zodSchema,
  type: CreateWorkspaceType$zodSchema,
}).describe("Missing scope");

export type CreateWorkspaceResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Workspace?: Workspace | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | CreateWorkspaceForbiddenResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | CreateWorkspaceUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const CreateWorkspaceResponse$zodSchema: z.ZodType<
  CreateWorkspaceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Workspace: Workspace$zodSchema.optional(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    CreateWorkspaceForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    CreateWorkspaceUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
