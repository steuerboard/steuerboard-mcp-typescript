/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { ClientUser, ClientUser$zodSchema } from "./clientuser.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type GetUserRequest = { id: string; xClientId: string };

export const GetUserRequest$zodSchema: z.ZodType<
  GetUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  xClientId: z.string(),
});

export type GetUserPath2 = string | number;

export const GetUserPath2$zodSchema: z.ZodType<
  GetUserPath2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type GetUserIssue2 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const GetUserIssue2$zodSchema: z.ZodType<
  GetUserIssue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type GetUserError2 = { issues: Array<GetUserIssue2>; name: string };

export const GetUserError2$zodSchema: z.ZodType<
  GetUserError2,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => GetUserIssue2$zodSchema)),
  name: z.string(),
});

export type GetUserResponseBody2 = { success: boolean; error: GetUserError2 };

export const GetUserResponseBody2$zodSchema: z.ZodType<
  GetUserResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => GetUserError2$zodSchema),
  success: z.boolean(),
});

export type GetUserPath1 = string | number;

export const GetUserPath1$zodSchema: z.ZodType<
  GetUserPath1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type GetUserIssue1 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const GetUserIssue1$zodSchema: z.ZodType<
  GetUserIssue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type GetUserError1 = { issues: Array<GetUserIssue1>; name: string };

export const GetUserError1$zodSchema: z.ZodType<
  GetUserError1,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => GetUserIssue1$zodSchema)),
  name: z.string(),
});

export type GetUserResponseBody1 = { success: boolean; error: GetUserError1 };

export const GetUserResponseBody1$zodSchema: z.ZodType<
  GetUserResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => GetUserError1$zodSchema),
  success: z.boolean(),
});

/**
 * The validation error(s)
 */
export type GetUserResponseBody = GetUserResponseBody1 | GetUserResponseBody2;

export const GetUserResponseBody$zodSchema: z.ZodType<
  GetUserResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetUserResponseBody1$zodSchema),
  z.lazy(() => GetUserResponseBody2$zodSchema),
]).describe("The validation error(s)");

export const GetUserStatusCode$zodSchema = z.literal(403);

export type GetUserStatusCode = z.infer<typeof GetUserStatusCode$zodSchema>;

export const GetUserType$zodSchema = z.enum([
  "auth_error",
]);

export type GetUserType = z.infer<typeof GetUserType$zodSchema>;

export const GetUserCode$zodSchema = z.enum([
  "missing_scope",
]);

export type GetUserCode = z.infer<typeof GetUserCode$zodSchema>;

/**
 * Missing scope
 */
export type GetUserForbiddenResponseBody = {
  status_code: GetUserStatusCode;
  type: GetUserType;
  code: GetUserCode;
  message: string;
};

export const GetUserForbiddenResponseBody$zodSchema: z.ZodType<
  GetUserForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: GetUserCode$zodSchema,
  message: z.string(),
  status_code: GetUserStatusCode$zodSchema,
  type: GetUserType$zodSchema,
}).describe("Missing scope");

export type GetUserResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ClientUser?: ClientUser | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  object?: GetUserForbiddenResponseBody | undefined;
  not_found?: NotFound | undefined;
  oneOf?: GetUserResponseBody1 | GetUserResponseBody2 | undefined;
  rate_limit?: RateLimit | undefined;
};

export const GetUserResponse$zodSchema: z.ZodType<
  GetUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ClientUser: ClientUser$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  not_found: NotFound$zodSchema.optional(),
  object: z.lazy(() => GetUserForbiddenResponseBody$zodSchema).optional(),
  oneOf: z.union([
    z.lazy(() => GetUserResponseBody1$zodSchema),
    z.lazy(() => GetUserResponseBody2$zodSchema),
  ]).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
