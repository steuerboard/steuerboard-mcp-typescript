/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { Client, Client$zodSchema } from "./client.js";
import { ClientUpdate, ClientUpdate$zodSchema } from "./clientupdate.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type UpdateClientRequest = { id: string; ClientUpdate: ClientUpdate };

export const UpdateClientRequest$zodSchema: z.ZodType<
  UpdateClientRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ClientUpdate: ClientUpdate$zodSchema,
  id: z.string(),
});

export type UpdateClientPath2 = string | number;

export const UpdateClientPath2$zodSchema: z.ZodType<
  UpdateClientPath2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type UpdateClientIssue2 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const UpdateClientIssue2$zodSchema: z.ZodType<
  UpdateClientIssue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type UpdateClientError2 = {
  issues: Array<UpdateClientIssue2>;
  name: string;
};

export const UpdateClientError2$zodSchema: z.ZodType<
  UpdateClientError2,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => UpdateClientIssue2$zodSchema)),
  name: z.string(),
});

export type UpdateClientResponseBody2 = {
  success: boolean;
  error: UpdateClientError2;
};

export const UpdateClientResponseBody2$zodSchema: z.ZodType<
  UpdateClientResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => UpdateClientError2$zodSchema),
  success: z.boolean(),
});

export type UpdateClientPath1 = string | number;

export const UpdateClientPath1$zodSchema: z.ZodType<
  UpdateClientPath1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type UpdateClientIssue1 = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const UpdateClientIssue1$zodSchema: z.ZodType<
  UpdateClientIssue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type UpdateClientError1 = {
  issues: Array<UpdateClientIssue1>;
  name: string;
};

export const UpdateClientError1$zodSchema: z.ZodType<
  UpdateClientError1,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => UpdateClientIssue1$zodSchema)),
  name: z.string(),
});

export type UpdateClientResponseBody1 = {
  success: boolean;
  error: UpdateClientError1;
};

export const UpdateClientResponseBody1$zodSchema: z.ZodType<
  UpdateClientResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => UpdateClientError1$zodSchema),
  success: z.boolean(),
});

/**
 * The validation error(s)
 */
export type UpdateClientResponseBody =
  | UpdateClientResponseBody1
  | UpdateClientResponseBody2;

export const UpdateClientResponseBody$zodSchema: z.ZodType<
  UpdateClientResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateClientResponseBody1$zodSchema),
  z.lazy(() => UpdateClientResponseBody2$zodSchema),
]).describe("The validation error(s)");

export const UpdateClientStatusCode$zodSchema = z.literal(403);

export type UpdateClientStatusCode = z.infer<
  typeof UpdateClientStatusCode$zodSchema
>;

export const UpdateClientType$zodSchema = z.enum([
  "auth_error",
]);

export type UpdateClientType = z.infer<typeof UpdateClientType$zodSchema>;

export const UpdateClientCode$zodSchema = z.enum([
  "missing_scope",
]);

export type UpdateClientCode = z.infer<typeof UpdateClientCode$zodSchema>;

/**
 * Missing scope
 */
export type UpdateClientForbiddenResponseBody = {
  status_code: UpdateClientStatusCode;
  type: UpdateClientType;
  code: UpdateClientCode;
  message: string;
};

export const UpdateClientForbiddenResponseBody$zodSchema: z.ZodType<
  UpdateClientForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: UpdateClientCode$zodSchema,
  message: z.string(),
  status_code: UpdateClientStatusCode$zodSchema,
  type: UpdateClientType$zodSchema,
}).describe("Missing scope");

export type UpdateClientResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Client?: Client | undefined;
  auth_error?: AuthError | undefined;
  object?: UpdateClientForbiddenResponseBody | undefined;
  not_found?: NotFound | undefined;
  oneOf?: UpdateClientResponseBody1 | UpdateClientResponseBody2 | undefined;
  rate_limit?: RateLimit | undefined;
};

export const UpdateClientResponse$zodSchema: z.ZodType<
  UpdateClientResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Client: Client$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  not_found: NotFound$zodSchema.optional(),
  object: z.lazy(() => UpdateClientForbiddenResponseBody$zodSchema).optional(),
  oneOf: z.union([
    z.lazy(() => UpdateClientResponseBody1$zodSchema),
    z.lazy(() => UpdateClientResponseBody2$zodSchema),
  ]).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
