/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { PaginatedUsers, PaginatedUsers$zodSchema } from "./paginatedusers.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type ListUsersRequest = {
  limit?: number | undefined;
  cursor?: string | undefined;
  xClientId: string;
};

export const ListUsersRequest$zodSchema: z.ZodType<
  ListUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  limit: z.number().default(20),
  xClientId: z.string(),
});

export type ListUsersPath = string | number;

export const ListUsersPath$zodSchema: z.ZodType<
  ListUsersPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type ListUsersIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const ListUsersIssue$zodSchema: z.ZodType<
  ListUsersIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type ListUsersError = { issues: Array<ListUsersIssue>; name: string };

export const ListUsersError$zodSchema: z.ZodType<
  ListUsersError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => ListUsersIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type ListUsersUnprocessableEntityResponseBody = {
  success: boolean;
  error: ListUsersError;
};

export const ListUsersUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  ListUsersUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => ListUsersError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

export const ListUsersStatusCode$zodSchema = z.literal(403);

export type ListUsersStatusCode = z.infer<typeof ListUsersStatusCode$zodSchema>;

export const ListUsersType$zodSchema = z.enum([
  "auth_error",
]);

export type ListUsersType = z.infer<typeof ListUsersType$zodSchema>;

export const ListUsersCode$zodSchema = z.enum([
  "missing_scope",
]);

export type ListUsersCode = z.infer<typeof ListUsersCode$zodSchema>;

/**
 * Missing scope
 */
export type ListUsersForbiddenResponseBody = {
  status_code: ListUsersStatusCode;
  type: ListUsersType;
  code: ListUsersCode;
  message: string;
};

export const ListUsersForbiddenResponseBody$zodSchema: z.ZodType<
  ListUsersForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: ListUsersCode$zodSchema,
  message: z.string(),
  status_code: ListUsersStatusCode$zodSchema,
  type: ListUsersType$zodSchema,
}).describe("Missing scope");

export type ListUsersResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  PaginatedUsers?: PaginatedUsers | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | ListUsersForbiddenResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | ListUsersUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const ListUsersResponse$zodSchema: z.ZodType<
  ListUsersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  PaginatedUsers: PaginatedUsers$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    ListUsersForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    ListUsersUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
