/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { ClientUser, ClientUser$zodSchema } from "./clientuser.js";
import {
  ClientUserInvite,
  ClientUserInvite$zodSchema,
} from "./clientuserinvite.js";
import { Conflict, Conflict$zodSchema } from "./conflict.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type InviteUserRequest = {
  xClientId: string;
  ClientUserInvite: ClientUserInvite;
};

export const InviteUserRequest$zodSchema: z.ZodType<
  InviteUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ClientUserInvite: ClientUserInvite$zodSchema,
  xClientId: z.string(),
});

export type InviteUserPath = string | number;

export const InviteUserPath$zodSchema: z.ZodType<
  InviteUserPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type InviteUserIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const InviteUserIssue$zodSchema: z.ZodType<
  InviteUserIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type InviteUserError = { issues: Array<InviteUserIssue>; name: string };

export const InviteUserError$zodSchema: z.ZodType<
  InviteUserError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => InviteUserIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type InviteUserUnprocessableEntityResponseBody = {
  success: boolean;
  error: InviteUserError;
};

export const InviteUserUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  InviteUserUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => InviteUserError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

export const InviteUserStatusCode$zodSchema = z.literal(403);

export type InviteUserStatusCode = z.infer<
  typeof InviteUserStatusCode$zodSchema
>;

export const InviteUserType$zodSchema = z.enum([
  "auth_error",
]);

export type InviteUserType = z.infer<typeof InviteUserType$zodSchema>;

export const InviteUserCode$zodSchema = z.enum([
  "missing_scope",
]);

export type InviteUserCode = z.infer<typeof InviteUserCode$zodSchema>;

/**
 * Missing scope
 */
export type InviteUserForbiddenResponseBody = {
  status_code: InviteUserStatusCode;
  type: InviteUserType;
  code: InviteUserCode;
  message: string;
};

export const InviteUserForbiddenResponseBody$zodSchema: z.ZodType<
  InviteUserForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: InviteUserCode$zodSchema,
  message: z.string(),
  status_code: InviteUserStatusCode$zodSchema,
  type: InviteUserType$zodSchema,
}).describe("Missing scope");

export type InviteUserResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ClientUser?: ClientUser | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | InviteUserForbiddenResponseBody
    | undefined;
  not_found?: NotFound | undefined;
  conflict?: Conflict | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | InviteUserUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const InviteUserResponse$zodSchema: z.ZodType<
  InviteUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ClientUser: ClientUser$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  conflict: Conflict$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    InviteUserForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    InviteUserUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  not_found: NotFound$zodSchema.optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
