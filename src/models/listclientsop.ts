/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import {
  PaginatedClients,
  PaginatedClients$zodSchema,
} from "./paginatedclients.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

/**
 * Include archived clients
 */
export const Archived$zodSchema = z.enum([
  "true",
  "false",
]).describe("Include archived clients");

export type Archived = z.infer<typeof Archived$zodSchema>;

/**
 * The type of the client. 'natural_person' for individuals, 'legal_person' for companies like UG, GmbH, AG, Ltd., Inc., etc. and 'individual_enterprise' for sole proprietorships.
 */
export const ListClientsClientType$zodSchema = z.enum([
  "natural_person",
  "individual_enterprise",
  "legal_person",
]).describe(
  "The type of the client. 'natural_person' for individuals, 'legal_person' for companies like UG, GmbH, AG, Ltd., Inc., etc. and 'individual_enterprise' for sole proprietorships.",
);

export type ListClientsClientType = z.infer<
  typeof ListClientsClientType$zodSchema
>;

/**
 * The sort field of the results
 */
export const ListClientsSort$zodSchema = z.enum([
  "createdAt",
  "updatedAt",
  "archivedAt",
  "name",
  "customId",
]).describe("The sort field of the results");

export type ListClientsSort = z.infer<typeof ListClientsSort$zodSchema>;

/**
 * The order of the results based on the sort field
 */
export const ListClientsOrder$zodSchema = z.enum([
  "asc",
  "desc",
]).describe("The order of the results based on the sort field");

export type ListClientsOrder = z.infer<typeof ListClientsOrder$zodSchema>;

export type ListClientsRequest = {
  limit?: number | undefined;
  cursor?: string | undefined;
  customId?: string | undefined;
  slug?: string | undefined;
  archived?: Archived | undefined;
  type?: ListClientsClientType | undefined;
  sort?: ListClientsSort | undefined;
  order?: ListClientsOrder | undefined;
};

export const ListClientsRequest$zodSchema: z.ZodType<
  ListClientsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  archived: Archived$zodSchema.default("false"),
  cursor: z.string().optional(),
  customId: z.string().optional(),
  limit: z.number().default(20),
  order: ListClientsOrder$zodSchema.default("desc"),
  slug: z.string().optional(),
  sort: ListClientsSort$zodSchema.default("createdAt"),
  type: ListClientsClientType$zodSchema.optional(),
});

export type ListClientsPath = string | number;

export const ListClientsPath$zodSchema: z.ZodType<
  ListClientsPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type ListClientsIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const ListClientsIssue$zodSchema: z.ZodType<
  ListClientsIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type ListClientsError = {
  issues: Array<ListClientsIssue>;
  name: string;
};

export const ListClientsError$zodSchema: z.ZodType<
  ListClientsError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => ListClientsIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type ListClientsUnprocessableEntityResponseBody = {
  success: boolean;
  error: ListClientsError;
};

export const ListClientsUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  ListClientsUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => ListClientsError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

export const ListClientsType$zodSchema = z.enum([
  "auth_error",
]);

export type ListClientsType = z.infer<typeof ListClientsType$zodSchema>;

export const ListClientsCode$zodSchema = z.enum([
  "missing_scope",
]);

export type ListClientsCode = z.infer<typeof ListClientsCode$zodSchema>;

/**
 * Missing scope
 */
export type ListClientsForbiddenResponseBody = {
  status_code: number;
  type: ListClientsType;
  code: ListClientsCode;
  message: string;
};

export const ListClientsForbiddenResponseBody$zodSchema: z.ZodType<
  ListClientsForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: ListClientsCode$zodSchema,
  message: z.string(),
  status_code: z.number(),
  type: ListClientsType$zodSchema,
}).describe("Missing scope");

export type ListClientsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  PaginatedClients?: PaginatedClients | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | ListClientsForbiddenResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | ListClientsUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const ListClientsResponse$zodSchema: z.ZodType<
  ListClientsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  PaginatedClients: PaginatedClients$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    ListClientsForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    ListClientsUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
