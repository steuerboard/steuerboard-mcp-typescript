/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Client, Client$zodSchema } from "./client.js";
import { Pagination, Pagination$zodSchema } from "./pagination.js";

/**
 * Include archived clients
 */
export const Archived$zodSchema = z.enum([
  "true",
  "false",
]).describe("Include archived clients");

export type Archived = z.infer<typeof Archived$zodSchema>;

/**
 * The type of the client. 'natural_person' for individuals, 'individual_enterprise' for companies like UG, GmbH, AG, Ltd., Inc., etc. and 'legal_person' for sole proprietorships.
 */
export const ListClientsType$zodSchema = z.enum([
  "natural_person",
  "individual_enterprise",
  "legal_person",
]).describe(
  "The type of the client. 'natural_person' for individuals, 'individual_enterprise' for companies like UG, GmbH, AG, Ltd., Inc., etc. and 'legal_person' for sole proprietorships.",
);

export type ListClientsType = z.infer<typeof ListClientsType$zodSchema>;

/**
 * The sort field of the results
 */
export const Sort$zodSchema = z.enum([
  "createdAt",
  "updatedAt",
  "archivedAt",
  "name",
  "customId",
]).describe("The sort field of the results");

export type Sort = z.infer<typeof Sort$zodSchema>;

/**
 * The order of the results based on the sort field
 */
export const Order$zodSchema = z.enum([
  "asc",
  "desc",
]).describe("The order of the results based on the sort field");

export type Order = z.infer<typeof Order$zodSchema>;

export type ListClientsRequest = {
  limit?: number | undefined;
  cursor?: string | undefined;
  customId?: string | undefined;
  slug?: string | undefined;
  archived?: Archived | undefined;
  type?: ListClientsType | undefined;
  sort?: Sort | undefined;
  order?: Order | undefined;
};

export const ListClientsRequest$zodSchema: z.ZodType<
  ListClientsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  archived: Archived$zodSchema.default("false"),
  cursor: z.string().optional(),
  customId: z.string().optional(),
  limit: z.number().default(20),
  order: Order$zodSchema.default("desc"),
  slug: z.string().optional(),
  sort: Sort$zodSchema.default("createdAt"),
  type: ListClientsType$zodSchema.optional(),
});

/**
 * Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers
 */
export type ListClientsTooManyRequestsResponseBody = { message: string };

export const ListClientsTooManyRequestsResponseBody$zodSchema: z.ZodType<
  ListClientsTooManyRequestsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
}).describe(
  "Rate limit exceeded. Slow down requests or retry after the time specified in the rate limit response headers",
);

export type ListClientsPath = string | number;

export const ListClientsPath$zodSchema: z.ZodType<
  ListClientsPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type ListClientsIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const ListClientsIssue$zodSchema: z.ZodType<
  ListClientsIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type ListClientsError = {
  issues: Array<ListClientsIssue>;
  name: string;
};

export const ListClientsError$zodSchema: z.ZodType<
  ListClientsError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => ListClientsIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type ListClientsUnprocessableEntityResponseBody = {
  success: boolean;
  error: ListClientsError;
};

export const ListClientsUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  ListClientsUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => ListClientsError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

/**
 * Clients
 */
export type ListClientsResponseBody = {
  data: Array<Client>;
  pagination: Pagination;
};

export const ListClientsResponseBody$zodSchema: z.ZodType<
  ListClientsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(Client$zodSchema),
  pagination: Pagination$zodSchema,
}).describe("Clients");

export type ListClientsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  twoHundredApplicationJsonObject?: ListClientsResponseBody | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | ListClientsUnprocessableEntityResponseBody
    | undefined;
  fourHundredAndTwentyNineApplicationJsonObject?:
    | ListClientsTooManyRequestsResponseBody
    | undefined;
};

export const ListClientsResponse$zodSchema: z.ZodType<
  ListClientsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndTwentyNineApplicationJsonObject: z.lazy(() =>
    ListClientsTooManyRequestsResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    ListClientsUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  twoHundredApplicationJsonObject: z.lazy(() =>
    ListClientsResponseBody$zodSchema
  ).optional(),
});
