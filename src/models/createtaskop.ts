/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";
import { Task, Task$zodSchema } from "./task.js";
import { TaskCreate, TaskCreate$zodSchema } from "./taskcreate.js";

export type CreateTaskRequest = { xClientId: string; TaskCreate: TaskCreate };

export const CreateTaskRequest$zodSchema: z.ZodType<
  CreateTaskRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  TaskCreate: TaskCreate$zodSchema,
  xClientId: z.string(),
});

export type CreateTaskPath = string | number;

export const CreateTaskPath$zodSchema: z.ZodType<
  CreateTaskPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type CreateTaskIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const CreateTaskIssue$zodSchema: z.ZodType<
  CreateTaskIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type CreateTaskError = { issues: Array<CreateTaskIssue>; name: string };

export const CreateTaskError$zodSchema: z.ZodType<
  CreateTaskError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => CreateTaskIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type CreateTaskUnprocessableEntityResponseBody = {
  success: boolean;
  error: CreateTaskError;
};

export const CreateTaskUnprocessableEntityResponseBody$zodSchema: z.ZodType<
  CreateTaskUnprocessableEntityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => CreateTaskError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

export const CreateTaskStatusCode$zodSchema = z.literal(403);

export type CreateTaskStatusCode = z.infer<
  typeof CreateTaskStatusCode$zodSchema
>;

export const CreateTaskType$zodSchema = z.enum([
  "auth_error",
]);

export type CreateTaskType = z.infer<typeof CreateTaskType$zodSchema>;

export const CreateTaskCode$zodSchema = z.enum([
  "missing_scope",
]);

export type CreateTaskCode = z.infer<typeof CreateTaskCode$zodSchema>;

/**
 * Missing scope
 */
export type CreateTaskForbiddenResponseBody = {
  status_code: CreateTaskStatusCode;
  type: CreateTaskType;
  code: CreateTaskCode;
  message: string;
};

export const CreateTaskForbiddenResponseBody$zodSchema: z.ZodType<
  CreateTaskForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: CreateTaskCode$zodSchema,
  message: z.string(),
  status_code: CreateTaskStatusCode$zodSchema,
  type: CreateTaskType$zodSchema,
}).describe("Missing scope");

export type CreateTaskResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Task?: Task | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | CreateTaskForbiddenResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | CreateTaskUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const CreateTaskResponse$zodSchema: z.ZodType<
  CreateTaskResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Task: Task$zodSchema.optional(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    CreateTaskForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    CreateTaskUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
