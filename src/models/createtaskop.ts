/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Task, Task$zodSchema } from "./task.js";
import { TaskCreate, TaskCreate$zodSchema } from "./taskcreate.js";

export type CreateTaskRequest = {
  xClientId: string;
  TaskCreate?: TaskCreate | undefined;
};

export const CreateTaskRequest$zodSchema: z.ZodType<
  CreateTaskRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  TaskCreate: TaskCreate$zodSchema.optional(),
  xClientId: z.string(),
});

export type CreateTaskPath = string | number;

export const CreateTaskPath$zodSchema: z.ZodType<
  CreateTaskPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type CreateTaskIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const CreateTaskIssue$zodSchema: z.ZodType<
  CreateTaskIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type CreateTaskError = { issues: Array<CreateTaskIssue>; name: string };

export const CreateTaskError$zodSchema: z.ZodType<
  CreateTaskError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => CreateTaskIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type CreateTaskResponseBody = {
  success: boolean;
  error: CreateTaskError;
};

export const CreateTaskResponseBody$zodSchema: z.ZodType<
  CreateTaskResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => CreateTaskError$zodSchema),
  success: z.boolean(),
}).describe("The validation error(s)");

export type CreateTaskResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Task?: Task | undefined;
  object?: CreateTaskResponseBody | undefined;
};

export const CreateTaskResponse$zodSchema: z.ZodType<
  CreateTaskResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Task: Task$zodSchema.optional(),
  object: z.lazy(() => CreateTaskResponseBody$zodSchema).optional(),
});
