/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AccountantUser, AccountantUser$zodSchema } from "./accountantuser.js";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { NotFound, NotFound$zodSchema } from "./notfound.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";

export type GetAccountantUserRequest = { id: string };

export const GetAccountantUserRequest$zodSchema: z.ZodType<
  GetAccountantUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

export type GetAccountantUserPath = string | number;

export const GetAccountantUserPath$zodSchema: z.ZodType<
  GetAccountantUserPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type GetAccountantUserIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const GetAccountantUserIssue$zodSchema: z.ZodType<
  GetAccountantUserIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type GetAccountantUserError = {
  issues: Array<GetAccountantUserIssue>;
  name: string;
};

export const GetAccountantUserError$zodSchema: z.ZodType<
  GetAccountantUserError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => GetAccountantUserIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type GetAccountantUserUnprocessableEntityResponseBody = {
  success: boolean;
  error: GetAccountantUserError;
};

export const GetAccountantUserUnprocessableEntityResponseBody$zodSchema:
  z.ZodType<
    GetAccountantUserUnprocessableEntityResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.lazy(() => GetAccountantUserError$zodSchema),
    success: z.boolean(),
  }).describe("The validation error(s)");

export const GetAccountantUserStatusCode$zodSchema = z.literal(403);

export type GetAccountantUserStatusCode = z.infer<
  typeof GetAccountantUserStatusCode$zodSchema
>;

export const GetAccountantUserType$zodSchema = z.enum([
  "auth_error",
]);

export type GetAccountantUserType = z.infer<
  typeof GetAccountantUserType$zodSchema
>;

export const GetAccountantUserCode$zodSchema = z.enum([
  "missing_scope",
]);

export type GetAccountantUserCode = z.infer<
  typeof GetAccountantUserCode$zodSchema
>;

/**
 * Missing scope
 */
export type GetAccountantUserForbiddenResponseBody = {
  status_code: GetAccountantUserStatusCode;
  type: GetAccountantUserType;
  code: GetAccountantUserCode;
  message: string;
};

export const GetAccountantUserForbiddenResponseBody$zodSchema: z.ZodType<
  GetAccountantUserForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: GetAccountantUserCode$zodSchema,
  message: z.string(),
  status_code: GetAccountantUserStatusCode$zodSchema,
  type: GetAccountantUserType$zodSchema,
}).describe("Missing scope");

export type GetAccountantUserResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  AccountantUser?: AccountantUser | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | GetAccountantUserForbiddenResponseBody
    | undefined;
  not_found?: NotFound | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | GetAccountantUserUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const GetAccountantUserResponse$zodSchema: z.ZodType<
  GetAccountantUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  AccountantUser: AccountantUser$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  auth_error: AuthError$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    GetAccountantUserForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    GetAccountantUserUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  not_found: NotFound$zodSchema.optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
