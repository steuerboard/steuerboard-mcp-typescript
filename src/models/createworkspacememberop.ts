/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuthError, AuthError$zodSchema } from "./autherror.js";
import { BadRequest, BadRequest$zodSchema } from "./badrequest.js";
import { RateLimit, RateLimit$zodSchema } from "./ratelimit.js";
import {
  WorkspaceMember,
  WorkspaceMember$zodSchema,
} from "./workspacemember.js";
import {
  WorkspaceMemberCreate,
  WorkspaceMemberCreate$zodSchema,
} from "./workspacemembercreate.js";

export type CreateWorkspaceMemberRequest = {
  id: string;
  xClientId: string;
  WorkspaceMemberCreate: WorkspaceMemberCreate;
};

export const CreateWorkspaceMemberRequest$zodSchema: z.ZodType<
  CreateWorkspaceMemberRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  WorkspaceMemberCreate: WorkspaceMemberCreate$zodSchema,
  id: z.string(),
  xClientId: z.string(),
});

export type CreateWorkspaceMemberPath = string | number;

export const CreateWorkspaceMemberPath$zodSchema: z.ZodType<
  CreateWorkspaceMemberPath,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
]);

export type CreateWorkspaceMemberIssue = {
  code: string;
  path: Array<string | number>;
  message?: string | undefined;
};

export const CreateWorkspaceMemberIssue$zodSchema: z.ZodType<
  CreateWorkspaceMemberIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string().optional(),
  path: z.array(z.union([
    z.string(),
    z.number(),
  ])),
});

export type CreateWorkspaceMemberError = {
  issues: Array<CreateWorkspaceMemberIssue>;
  name: string;
};

export const CreateWorkspaceMemberError$zodSchema: z.ZodType<
  CreateWorkspaceMemberError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(z.lazy(() => CreateWorkspaceMemberIssue$zodSchema)),
  name: z.string(),
});

/**
 * The validation error(s)
 */
export type CreateWorkspaceMemberUnprocessableEntityResponseBody = {
  success: boolean;
  error: CreateWorkspaceMemberError;
};

export const CreateWorkspaceMemberUnprocessableEntityResponseBody$zodSchema:
  z.ZodType<
    CreateWorkspaceMemberUnprocessableEntityResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.lazy(() => CreateWorkspaceMemberError$zodSchema),
    success: z.boolean(),
  }).describe("The validation error(s)");

export const CreateWorkspaceMemberStatusCode$zodSchema = z.literal(403);

export type CreateWorkspaceMemberStatusCode = z.infer<
  typeof CreateWorkspaceMemberStatusCode$zodSchema
>;

export const CreateWorkspaceMemberType$zodSchema = z.enum([
  "auth_error",
]);

export type CreateWorkspaceMemberType = z.infer<
  typeof CreateWorkspaceMemberType$zodSchema
>;

export const CreateWorkspaceMemberCode$zodSchema = z.enum([
  "missing_scope",
]);

export type CreateWorkspaceMemberCode = z.infer<
  typeof CreateWorkspaceMemberCode$zodSchema
>;

/**
 * Missing scope
 */
export type CreateWorkspaceMemberForbiddenResponseBody = {
  status_code: CreateWorkspaceMemberStatusCode;
  type: CreateWorkspaceMemberType;
  code: CreateWorkspaceMemberCode;
  message: string;
};

export const CreateWorkspaceMemberForbiddenResponseBody$zodSchema: z.ZodType<
  CreateWorkspaceMemberForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: CreateWorkspaceMemberCode$zodSchema,
  message: z.string(),
  status_code: CreateWorkspaceMemberStatusCode$zodSchema,
  type: CreateWorkspaceMemberType$zodSchema,
}).describe("Missing scope");

export type CreateWorkspaceMemberResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  WorkspaceMember?: WorkspaceMember | undefined;
  bad_request?: BadRequest | undefined;
  auth_error?: AuthError | undefined;
  fourHundredAndThreeApplicationJsonObject?:
    | CreateWorkspaceMemberForbiddenResponseBody
    | undefined;
  fourHundredAndTwentyTwoApplicationJsonObject?:
    | CreateWorkspaceMemberUnprocessableEntityResponseBody
    | undefined;
  rate_limit?: RateLimit | undefined;
};

export const CreateWorkspaceMemberResponse$zodSchema: z.ZodType<
  CreateWorkspaceMemberResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  WorkspaceMember: WorkspaceMember$zodSchema.optional(),
  auth_error: AuthError$zodSchema.optional(),
  bad_request: BadRequest$zodSchema.optional(),
  fourHundredAndThreeApplicationJsonObject: z.lazy(() =>
    CreateWorkspaceMemberForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredAndTwentyTwoApplicationJsonObject: z.lazy(() =>
    CreateWorkspaceMemberUnprocessableEntityResponseBody$zodSchema
  ).optional(),
  rate_limit: RateLimit$zodSchema.optional(),
});
