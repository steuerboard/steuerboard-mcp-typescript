/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { SteuerboardCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$adminClientsCreateClient } from "./tools/adminClientsCreateClient.js";
import { tool$adminClientsGetClient } from "./tools/adminClientsGetClient.js";
import { tool$adminClientsListClients } from "./tools/adminClientsListClients.js";
import { tool$authMe } from "./tools/authMe.js";
import { tool$filesCreateFile } from "./tools/filesCreateFile.js";
import { tool$filesDeleteFile } from "./tools/filesDeleteFile.js";
import { tool$filesGetFile } from "./tools/filesGetFile.js";
import { tool$filesListFiles } from "./tools/filesListFiles.js";
import { tool$filesUpdateFile } from "./tools/filesUpdateFile.js";
import { tool$healthIndex } from "./tools/healthIndex.js";
import { tool$healthPing } from "./tools/healthPing.js";
import { tool$tasksCreateTask } from "./tools/tasksCreateTask.js";
import { tool$tasksDeleteTask } from "./tools/tasksDeleteTask.js";
import { tool$tasksGetTask } from "./tools/tasksGetTask.js";
import { tool$tasksListTasks } from "./tools/tasksListTasks.js";
import { tool$tasksUpdateTask } from "./tools/tasksUpdateTask.js";
import { tool$workspacesCreateWorkspace } from "./tools/workspacesCreateWorkspace.js";
import { tool$workspacesGetWorkspace } from "./tools/workspacesGetWorkspace.js";
import { tool$workspacesListWorkspaces } from "./tools/workspacesListWorkspaces.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  getSDK?: () => SteuerboardCore;
  serverURL?: string | undefined;
  security?: SDKOptions["security"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
}) {
  const server = new McpServer({
    name: "Steuerboard",
    version: "0.1.1",
  });

  const getClient = deps.getSDK || (() =>
    new SteuerboardCore({
      security: deps.security,
      serverURL: deps.serverURL,
      serverIdx: deps.serverIdx,
      debugLogger: deps.logger.level === "debug"
        ? {
          log: (...args) => console.log(...args),
          group: (...args) => console.group(...args),
          groupEnd: (...args) => console.groupEnd(...args),
        }
        : undefined,
    }));

  const scopes = new Set(deps.scopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    getClient,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(
    deps.logger,
    server,
    getClient,
    scopes,
  );
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    getClient,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, getClient, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$healthIndex);
  tool(tool$healthPing);
  tool(tool$authMe);
  tool(tool$adminClientsListClients);
  tool(tool$adminClientsCreateClient);
  tool(tool$adminClientsGetClient);
  tool(tool$workspacesListWorkspaces);
  tool(tool$workspacesCreateWorkspace);
  tool(tool$workspacesGetWorkspace);
  tool(tool$filesListFiles);
  tool(tool$filesCreateFile);
  tool(tool$filesGetFile);
  tool(tool$filesUpdateFile);
  tool(tool$filesDeleteFile);
  tool(tool$tasksListTasks);
  tool(tool$tasksCreateTask);
  tool(tool$tasksGetTask);
  tool(tool$tasksUpdateTask);
  tool(tool$tasksDeleteTask);

  return server;
}
